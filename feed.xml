<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://studhamza.github.io/hamza-folio/feed.xml" rel="self" type="application/atom+xml"/><link href="https://studhamza.github.io/hamza-folio/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-16T11:16:27+00:00</updated><id>https://studhamza.github.io/hamza-folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Documentation and Soapy Sdr source</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week12&13/" rel="alternate" type="text/html" title="Documentation and Soapy Sdr source"/><published>2025-08-25T01:00:00+00:00</published><updated>2025-08-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week12&amp;13</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week12&amp;13/"><![CDATA[<h2 id="fm-receiver-app--week-12-and-13-update">FM Receiver App – Week 12 and 13 Update</h2> <p>We’re coming to an end and these 2 weeks progress we’re documenting and fixing small bugs. Week 13s progress was the following topics:</p> <ol> <li>Improve Documentations, READMEs in each directory along with mkdocs github page</li> <li>Use soapy SDR source instead of osmocom</li> </ol> <hr/> <h3 id="documentation">Documentation</h3> <p>Its time to wrap things up and document my FM application, I added a README file in each directory that explains the files and function of each directory; making it easier for new contributors to understand the project structure. I also created a mkdocs web page with in depth tutorial that explains each concept that i implemented in the project.</p> <p>Check out the github page here <a href="https://studhamza.github.io/GNU-Radio-FM-App/">https://studhamza.github.io/GNU-Radio-FM-App/</a></p> <h3 id="soapy-sdr-source">SOAPY SDR source</h3> <p>The SoapySDR Source block is deprecated, but the <code class="language-plaintext highlighter-rouge">soapy_custom_source</code> block is not. I updated my code to use <code class="language-plaintext highlighter-rouge">soapy_custom_source</code> in order to avoid the additional dependencies of the Osmocom library. In addiction, since I am already using the SoapySDR Python bindings to detect connected devices, it made sense to use the <code class="language-plaintext highlighter-rouge">soapy_custom_source</code> block as well.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week12&amp;13/soapy-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week12&amp;13/soapy-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week12&amp;13/soapy-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week12&amp;13/soapy.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I have also noticed that there is no documentation for this block, maybe I need to contribute to the GNU Radio Docs.</p> <h2 id="end">End</h2> <p>Finally, this project has come to an end, there are plenty of suggested improvements that I might work on before the final submission</p> <ol> <li>Allow Sample Rate Change</li> <li>Improve FM detection logic</li> <li>Calculate Station strength and display it</li> </ol> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[This week’s focus was documentation and SOAPY SDR source]]></summary></entry><entry><title type="html">End of My GSoC journey</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week14_final/" rel="alternate" type="text/html" title="End of My GSoC journey"/><published>2025-08-25T01:00:00+00:00</published><updated>2025-08-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week14_final</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week14_final/"><![CDATA[<h1 id="gsoc-2025-fm-receiver-app---13-week-progress-summary">GSoC 2025 FM Receiver App - 13-Week Progress Summary</h1> <h2 id="project-overview">Project Overview</h2> <p><strong>Project</strong>: User-friendly FM Broadcast Receiver Application with RDS and Spectrum Scanning<br/> <strong>Organization</strong>: GNU Radio<br/> <strong>Timeline</strong>: May 30 - August 25, 2025 (13 weeks)<br/> <strong>Repository</strong>: <a href="https://github.com/StudHamza/GNU-Radio-FM-App">GNU-Radio-FM-App</a><br/> <strong>Documentation</strong>: <a href="https://studhamza.github.io/GNU-Radio-FM-App/">Project Documentation</a><br/> <strong>Tutorial</strong>: <a href="https://wiki.gnuradio.org/index.php?title=GNU_Radio_Flowgraph_Embedded_in_Python_Applications">GNU Radio Tutorial</a></p> <h2 id="gallery">Gallery</h2> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week14/rds_rx-1-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week14/rds_rx-1-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week14/rds_rx-1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week14/rds_rx-1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week9/top_menu-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week9/top_menu-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week9/top_menu-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week9/top_menu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/station_btn-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/station_btn-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/station_btn-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/station_btn.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rf_band-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rf_band.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/water_fall-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/water_fall.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rds-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rds-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rds-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rds.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> </swiper-container> <h2 id="key-achievements">Key Achievements</h2> <h3 id="core-application-development">Core Application Development</h3> <ul> <li><strong>Complete PyQt5-based GUI</strong> with home view, debug view, and SDR configuration</li> <li><strong>Integrated GNU Radio flowgraphs</strong> with Python application for real-time FM reception</li> <li><strong>RDS (Radio Data System) integration</strong> using gr-rds module for metadata extraction</li> <li><strong>Multi-threaded architecture</strong> preventing UI freezing during scanning operations</li> <li><strong>Configuration management system</strong> for saving user settings and station lists</li> </ul> <h3 id="advanced-features">Advanced Features</h3> <ul> <li><strong>Automated FM station detection</strong> using power spectral density analysis with frequency raster alignment</li> <li><strong>Multiple simultaneous recording</strong> capability with hierarchical GNU Radio blocks</li> <li><strong>Real-time audio visualization</strong> and spectrum analysis in debug view</li> <li><strong>SDR device auto-detection</strong> with SoapySDR integration</li> <li><strong>Station management</strong> with add/delete/record functionality</li> </ul> <h3 id="technical-implementation">Technical Implementation</h3> <ul> <li><strong>Modular project structure</strong> with clear separation of GUI, core processing, and utilities</li> <li><strong>Custom GNU Radio embedded blocks</strong> for station detection and signal processing</li> <li><strong>Frequency scanning algorithm</strong> capable of detecting 23+ FM stations</li> <li><strong>Audio recording system</strong> with WAV file output</li> <li><strong>Real-time spectrum waterfall</strong> and constellation diagrams</li> </ul> <h2 id="weekly-progress-breakdown">Weekly Progress Breakdown</h2> <h3 id="weeks-1-2-foundation--design">Weeks 1-2: Foundation &amp; Design</h3> <ul> <li>Established comprehensive project directory structure</li> <li>Created UI mockups in Figma and implemented basic PyQt5 interface</li> <li>Set up development environment with GNU Radio integration</li> </ul> <h3 id="weeks-3-4-core-fm-reception">Weeks 3-4: Core FM Reception</h3> <ul> <li>Implemented basic FM receiver flowgraph integration</li> <li>Added RDS panel integration from gr-rds module</li> <li>Developed initial frequency scanning approach using PSD analysis</li> </ul> <h3 id="weeks-5-6-station-detection">Weeks 5-6: Station Detection</h3> <ul> <li>Built sophisticated FM scanner using frequency bin power summation</li> <li>Implemented threshold detection with peak finding algorithms</li> <li>Added debug view with RF band, waterfall, RDS, and audio visualizations</li> <li>Integrated 19kHz pilot tone detection for station verification</li> </ul> <h3 id="weeks-7-8-code-quality--features">Weeks 7-8: Code Quality &amp; Features</h3> <ul> <li>Code formatting and documentation using pylint, isort, and mkdocs</li> <li>Added audio visualization and improved RDS panel integration</li> <li>Resolved import issues with embedded GNU Radio blocks</li> </ul> <h3 id="weeks-9-10-recording--configuration">Weeks 9-10: Recording &amp; Configuration</h3> <ul> <li>Implemented audio recording functionality with WAV sink integration</li> <li>Added top menu bar and file path selection</li> <li>Created SDR device configuration manager with auto-detection</li> <li>Fixed toggle button state management during scanning</li> </ul> <h3 id="weeks-11-12-multi-recording--polish">Weeks 11-12: Multi-Recording &amp; Polish</h3> <ul> <li>Developed multiple simultaneous recording feature using hierarchical blocks</li> <li>Added station button widgets with record/delete functionality</li> <li>Implemented notification system for bandwidth constraints</li> <li>Created auto-select SDR functionality for single-device setups</li> </ul> <h3 id="week-13-documentation--finalization">Week 13: Documentation &amp; Finalization</h3> <ul> <li>Comprehensive documentation with mkdocs GitHub pages deployment</li> <li>Migrated from deprecated Osmocom to soapy_custom_source blocks</li> <li>Final bug fixes and README improvements across all directories</li> </ul> <h3 id="week-14-write-tutorial-in-gnu-radio-tutorials-section">Week 14: Write Tutorial in GNU Radio Tutorials Section</h3> <h2 id="technical-challenges-overcome">Technical Challenges Overcome</h2> <h3 id="sdr-resource-management">SDR Resource Management</h3> <ul> <li><strong>Problem</strong>: GNU Radio flowgraphs couldn’t share SDR access simultaneously</li> <li><strong>Solution</strong>: Implemented selector blocks to switch between scan/play modes within single flowgraph</li> </ul> <h3 id="station-detection-accuracy">Station Detection Accuracy</h3> <ul> <li><strong>Problem</strong>: Simple peak detection failed without external LNA amplification</li> <li><strong>Solution</strong>: Developed normalized power summation approach aligned to FM frequency raster (100kHz intervals)</li> </ul> <h3 id="multi-threading-integration">Multi-threading Integration</h3> <ul> <li><strong>Problem</strong>: Blocking operations froze the GUI during spectrum scanning</li> <li><strong>Solution</strong>: Created QThread-based scanning monitor with progress reporting</li> </ul> <h3 id="import-system-conflicts">Import System Conflicts</h3> <ul> <li><strong>Problem</strong>: GRC-generated code had import path issues with embedded blocks</li> <li><strong>Solution</strong>: Manual module registration in sys.modules before flowgraph import</li> </ul> <h2 id="system-architecture">System Architecture</h2> <h3 id="directory-structure">Directory Structure</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fm-receiver-app/
├── docs/              # MkDocs documentation
├── flowgraphs/        # GNU Radio .grc files and generated Python
├── src/fm_receiver/   # Main application code
│   ├── gui/          # PyQt5 interface components
│   ├── core/         # GNU Radio integration
│   └── utils/        # Helper functions and scanning logic
├── tests/            # Unit and integration tests
└── examples/         # Sample configurations
</code></pre></div></div> <h3 id="key-components">Key Components</h3> <ul> <li><strong>Main Window</strong>: Central GUI controller with view management</li> <li><strong>FM Scanner</strong>: Embedded GNU Radio block for station detection</li> <li><strong>Multiple Recorder</strong>: Hierarchical blocks for simultaneous recording</li> <li><strong>Config Manager</strong>: Settings persistence and SDR device management</li> <li><strong>Debug View</strong>: Real-time visualization with spectrum plots</li> </ul> <h2 id="performance-metrics">Performance Metrics</h2> <h3 id="detection-capabilities">Detection Capabilities</h3> <ul> <li><strong>Station Detection</strong>: Up to 23 FM stations detected automatically</li> <li><strong>Frequency Range</strong>: 87.5-108.0 MHz FM broadcast band</li> <li><strong>Detection Method</strong>: Power spectral density with 100kHz raster alignment</li> <li><strong>Accuracy</strong>: All detected stations verified through manual listening</li> </ul> <h3 id="recording-features">Recording Features</h3> <ul> <li><strong>Simultaneous Recordings</strong>: Up to 3 stations within 2MHz RTL-SDR bandwidth</li> <li><strong>Audio Quality</strong>: 48kHz sampling rate with WAV output</li> <li><strong>Bandwidth Constraints</strong>: Automatic validation prevents out-of-range recording</li> </ul> <h3 id="real-time-processing">Real-time Processing</h3> <ul> <li><strong>FFT Size</strong>: 1024-point FFT for spectrum analysis</li> <li><strong>Update Rate</strong>: Real-time spectrum waterfall and audio visualization</li> <li><strong>Threading</strong>: Non-blocking GUI with background processing threads</li> </ul> <h2 id="future-enhancement-opportunities">Future Enhancement Opportunities</h2> <h3 id="short-term-improvements">Short-term Improvements</h3> <ol> <li><strong>Dynamic Sample Rate Control</strong>: Allow users to change SDR sample rates without flowgraph reconstruction</li> <li><strong>Enhanced FM Detection</strong>: Statistical noise testing to prevent false positives</li> <li><strong>Station Strength Indicators</strong>: Display signal strength metrics for detected stations</li> </ol> <h3 id="long-term-extensions">Long-term Extensions</h3> <ol> <li><strong>SCA Decoding</strong>: Subsidiary Communications Authorization support</li> <li><strong>Network Integration</strong>: Web SDR connectivity for remote reception</li> <li><strong>Advanced Audio Processing</strong>: Stereo/mono switching, audio effects</li> </ol> <h2 id="documentation--resources">Documentation &amp; Resources</h2> <h3 id="user-documentation">User Documentation</h3> <ul> <li><strong>GitHub Pages</strong>: Comprehensive tutorials and API documentation</li> <li><strong>README Files</strong>: Directory-specific documentation for contributors</li> <li><strong>Installation Guide</strong>: Step-by-step setup instructions</li> <li><strong>Usage Examples</strong>: Sample configurations for different SDR hardware</li> </ul> <h3 id="developer-resources">Developer Resources</h3> <ul> <li><strong>Code Documentation</strong>: Comprehensive docstrings and type hints</li> <li><strong>Testing Framework</strong>: Unit tests for core functionality</li> <li><strong>Contribution Guidelines</strong>: Clear project structure for new developers</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>The FM Receiver Application successfully demonstrates a complete software-defined radio solution combining GNU Radio’s signal processing capabilities with a user-friendly PyQt5 interface. The project achieved all primary objectives including automated station detection, RDS integration, recording functionality, and advanced debugging tools.</p> <p>The modular architecture and comprehensive documentation provide a solid foundation for future enhancements and community contributions. The application serves as both a practical FM receiver tool and an educational resource for SDR development with GNU Radio.</p> <p><strong>Final Status</strong>: Project completed successfully with all core features implemented and documented. The application is ready for end-user deployment and continued community development.</p> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Final report summing up my 14 week GSOC journey with GNU Radio organization.]]></summary></entry><entry><title type="html">Building a SatNOGs Ground Station in Egypt</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/satnogs-pro/" rel="alternate" type="text/html" title="Building a SatNOGs Ground Station in Egypt"/><published>2025-08-25T01:00:00+00:00</published><updated>2025-08-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/satnogs-pro</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/satnogs-pro/"><![CDATA[<h2 id="bill-of-materials">Bill of Materials</h2> <table> <thead> <tr> <th>Component</th> <th>Model / Link</th> <th>Purpose</th> <th>Price (USD)</th> </tr> </thead> <tbody> <tr> <td>Antenna</td> <td><a href="https://www.amazon.com/Bingfu-136-174MHz-400-470MHz-Handheld-Magnetic/dp/B07X2LK2NL">Bingfu Omni, VHF (136-174 MHz) &amp; UHF (400-470 MHz)</a></td> <td>Receiving satellite signals; suitable for non-rotary builds</td> <td>10.00</td> </tr> <tr> <td>Low Noise Amplifier (LNA)</td> <td><a href="https://www.nooelec.com/store/lana.html">NooElec Inline LNA v2</a></td> <td>Signal amplification</td> <td>35.00</td> </tr> <tr> <td>SDR Receiver</td> <td><a href="https://www.nooelec.com/store/nesdr-smart-sdr.html">NooElec NESDR SMArt v5</a></td> <td>RF signal reception</td> <td>37.95</td> </tr> <tr> <td>Controller</td> <td>Raspberry Pi 5 (8 GB)</td> <td>Running SatNOGs client software</td> <td>93.80</td> </tr> <tr> <td>Power Distribution Unit (PDU) 1</td> <td><a href="https://deskpi.com/products/deskpi-dc-pdu-lite-7-ch-0-5u-for-deskpi-rackmate-t1">DeskPi DC PDU Lite</a></td> <td>Original PDU for 12 V / mixed loads</td> <td>50.00</td> </tr> <tr> <td>Power Distribution Unit (PDU) 2</td> <td><a href="https://52pi.com/collections/new-arrivals/products/52pi-4-usb-channel-5v-power-supply-module-for-raspberry-pi-pico-0-91-inch-oled-screen-compatible-with-1u-rack-mounting">52Pi 4-Channel 5 V PDU</a></td> <td>Stable 5 V power for Raspberry Pi and peripherals</td> <td>17.50</td> </tr> <tr> <td>Rack Mount</td> <td><a href="https://deskpi.com/products/deskpi-rackmate-t0-black-version-rackmount-10-inch-4u-server-cabinet-for-network-servers-audio-and-video-equipment">DeskPi RackMate</a></td> <td>Enclosure for station hardware</td> <td>80.00</td> </tr> <tr> <td>Bracket</td> <td><a href="https://deskpi.com/products/deskpi-rackmate-10-inch-1u-rack-mount-with-2-pcie-nvme-boards-for-raspberry-pi-5-supports-m-2-nvme-ssds/">DeskPi DP-0039 Bracket</a></td> <td>Mounts Raspberry Pi + new PDU</td> <td>40.00</td> </tr> <tr> <td>Display</td> <td><a href="https://www.amazon.com/dp/B0CPLYD5GD?ref_=cm_sw_r_cp_ud_dp_2EGBYHWQDMQYEVC9GPZV">GeeekPi 10.1-inch LCD Screen</a></td> <td>Display screen for desktop environment</td> <td>69.99</td> </tr> </tbody> </table> <h2 id="project-overview">Project Overview</h2> <p><strong>Project</strong>: Development of a SatNOGs fixed ground station with two Power Distribution Units (PDUs) to support a future rotator system.<br/> <strong>Organization</strong>: <a href="https://outlyer.space/">Outlyer.space</a><br/> <strong>Timeline</strong>: February – September 2025 (~30 weeks)</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/8-480.webp 480w,/hamza-folio/assets/img/satnogs/8-800.webp 800w,/hamza-folio/assets/img/satnogs/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Complete Ground Station" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="introduction">Introduction</h2> <p>This post documents the <strong>final build</strong> of a SatNOGs omnidirectional ground station in Egypt, created during my internship with <a href="https://outlyer.space/">Outlyer.space</a>.<br/> Originally planned as a 5–6 week project, it evolved into a <strong>30-week effort</strong> due to hardware challenges, shipping delays, and power distribution issues.</p> <p>If you’re new to <a href="https://satnogs.org/">SatNOGs</a>, it’s an open-source, global network of satellite ground stations. This project gave me hands-on experience with antennas, SDRs, and ground station operation — as well as navigating Egyptian customs for importing electronics.</p> <hr/> <h2 id="software-setup">Software Setup</h2> <p>The software stack follows the SatNOGs deployment model:</p> <ol> <li><strong>Prepare the Raspberry Pi</strong> <ul> <li>Download the SatNOGs 64-bit stable image from the <a href="https://gitlab.com/librespacefoundation/satnogs/satnogs-pi-gen">SatNOGs Raspberry Pi Image Repository</a>.</li> <li>Verify the image integrity using SHA256.</li> <li>Flash the image to the SD card using <a href="https://www.raspberrypi.com/software/https://www.raspberrypi.com/software/">Raspberry Pi Imager</a>: <ul> <li>Select your Raspberry Pi model.</li> <li>Provide the image path.</li> <li>Configure Wi-Fi, locale, SSH, and create a user account.</li> </ul> </li> </ul> </li> <li><strong>Initial Boot</strong> <ul> <li>Insert the SD card into the Raspberry Pi and power it on.</li> <li>Login with the credentials set earlier.</li> <li>Update the system: <ul> <li><code class="language-plaintext highlighter-rouge">sudo apt update &amp;&amp; sudo apt upgrade -y</code></li> </ul> </li> </ul> </li> <li><strong>Install &amp; Configure SatNOGs Client</strong> <ul> <li>Run <code class="language-plaintext highlighter-rouge">sudo satnogs-setup</code> to start the configuration menu.</li> <li>Register on <a href="https://network.satnogs.org">SatNOGs Network</a> and obtain your API token.</li> <li>In <code class="language-plaintext highlighter-rouge">satnogs-setup</code>, enter: <ul> <li><strong>SATNOGS_API_TOKEN</strong></li> <li><strong>SATNOGS_STATION_ID</strong>, LAT, LON, ELEV</li> <li><strong>SATNOGS_SOAPY_RX_DEVICE</strong> = <code class="language-plaintext highlighter-rouge">driver=rtlsdr</code></li> <li><strong>SATNOGS_RX_SAMP_RATE</strong> = <code class="language-plaintext highlighter-rouge">2.048e6</code></li> <li><strong>SATNOGS_RX_GAIN</strong> (adjust per satellite)</li> </ul> </li> </ul> </li> <li><strong>Gain Calibration</strong> <ul> <li>Connect the SDR and use a tool like CubicSDR to experiment with gain and noise levels:</li> </ul> </li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/17-480.webp 480w,/hamza-folio/assets/img/satnogs/17-800.webp 800w,/hamza-folio/assets/img/satnogs/17-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="CubicSDR application" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>(<em>Extra</em>) <strong>Desktop Enivroment</strong> - The SatNOGs images are server optimized with no GUI enviroment. To install a desktop enviroment run: - <code class="language-plaintext highlighter-rouge">sudo apt update sudo apt upgrade –y</code> to update the system - <code class="language-plaintext highlighter-rouge">sudo apt install raspberrypi-ui-mods –y</code> install Raspberry Pi PIXEL Desktop - Enable GUI on boot: - <code class="language-plaintext highlighter-rouge">sudo raspi-config</code> - Go to System Options &gt; Boot / Auto Login - Choose Desktop Autologin or just Desktop</p> <hr/> <h2 id="hardware">Hardware</h2> <p>The <strong>final hardware build</strong> integrates dual PDUs to solve earlier power issues:</p> <ul> <li><strong>Antenna</strong>: Omnidirectional, mounted on the building roof.</li> <li><strong>Signal Chain</strong>: Antenna → LNA → NooElec SDR → Raspberry Pi 5.</li> <li><strong>Power</strong>: <ul> <li>The original DeskPi PDU remains for 12 V and mixed loads.</li> <li>The new 52Pi 5 V PDU exclusively powers the Raspberry Pi, LNA, and LCD screen.</li> <li>Both the Pi and PDU are mounted using the DeskPi DP-0039 bracket for stability and modularity.</li> </ul> </li> </ul> <h3 id="assembly">Assembly</h3> <p>First, assemble the <a href="https://deskpi.com/products/deskpi-rackmate-t0-black-version-rackmount-10-inch-4u-server-cabinet-for-network-servers-audio-and-video-equipment">DeskPi Rackmount</a> following the included 14-page manual (6 steps). A YouTube <a href="https://www.youtube.com/watch?v=_yTCz_-Y8ks">guide</a> is also available, though not necessary due to the straightforward assembly.</p> <p>Next, install the <a href="https://deskpi.com/products/deskpi-rackmate-10-inch-1u-rack-mount-with-2-pcie-nvme-boards-for-raspberry-pi-5-supports-m-2-nvme-ssds?_pos=4&amp;_sid=6a17b54a4&amp;_ss=r">DeskPi Rackmate 10-inch 1U Rack</a>, designed for the Raspberry Pi 5. It provides a robust and efficient housing solution for both the <a href="https://52pi.com/blogs/blog/how-to-use-52pi-4-usb-channel-5v-power-supply-module-in-your-project">EP-0249 PDU</a>(52Pi 4-USB Channel PDU) and Raspberry Pi. Connect the 52Pi 4-USB Channel PDU to power the 5 V components, LCD screen, LNA and Pi.</p> <p>For more information about the <a href="https://wiki.52pi.com/index.php?title=EP-0249">EP-0249 PDU</a>, consult the wiki — it includes detailed information on the built-in Raspberry Pi Pico I²C LCD display of the PDU.</p> <div class="row"> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/18-480.webp 480w,/hamza-folio/assets/img/satnogs/18-800.webp 800w,/hamza-folio/assets/img/satnogs/18-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Pi RackMount" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/19-480.webp 480w,/hamza-folio/assets/img/satnogs/19-800.webp 800w,/hamza-folio/assets/img/satnogs/19-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Pi Rackmount 2" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/20-480.webp 480w,/hamza-folio/assets/img/satnogs/20-800.webp 800w,/hamza-folio/assets/img/satnogs/20-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Pi RackMount" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> </div> <p>Finally assemble the LCD Display and place it on top of the mount, wire everything together and your station is should be up and running. If not checkout the trouble shooting page of the SatNOGS Wiki, <a href="https://wiki.satnogs.org/Troubleshooting">https://wiki.satnogs.org/Troubleshooting</a>.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/11-480.webp 480w,/hamza-folio/assets/img/satnogs/11-800.webp 800w,/hamza-folio/assets/img/satnogs/11-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/11.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Power supply connections" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/9-480.webp 480w,/hamza-folio/assets/img/satnogs/9-800.webp 800w,/hamza-folio/assets/img/satnogs/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Final ground station and location" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/13-480.webp 480w,/hamza-folio/assets/img/satnogs/13-800.webp 800w,/hamza-folio/assets/img/satnogs/13-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Wiring" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This configuration isolates sensitive 5 V components, ensures stable operation, and leaves room for a future <strong>rotator upgrade</strong> without redesigning the power system.</p> <hr/> <h2 id="challenges--lessons-learned">Challenges &amp; Lessons Learned</h2> <p>While the <strong>final build</strong> works reliably, the path to get here involved several challenges:</p> <ol> <li><strong>Shipping Delays</strong> <ul> <li>Importing electronics to Egypt often took weeks per component. This extended the timeline far beyond the initial 6-week plan.</li> </ul> </li> <li><strong>Power Delivery Issues in the First Build</strong> <ul> <li>The initial setup used only the DeskPi PDU Lite.</li> <li>Its ~0.4 V drop per channel prevented the Raspberry Pi from booting even with a 10 A adapter.</li> <li>DeskPi support confirmed it was not intended for 5 V loads, prompting the switch to the 52Pi PDU.</li> </ul> </li> </ol> <p>These lessons underscore the importance of <strong>local sourcing</strong> and <strong>voltage verification</strong> when designing ground stations.</p> <hr/> <h2 id="performance-noaa-satellite-reception">Performance: NOAA Satellite Reception</h2> <p>From a 5th-floor urban location, an omnidirectional antenna has limited reception compared to directional or rotator-based systems. However, the station successfully captured faint NOAA signals visible in the waterfall plot below:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/12-480.webp 480w,/hamza-folio/assets/img/satnogs/12-800.webp 800w,/hamza-folio/assets/img/satnogs/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Received signal waterfall" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="useful-links">Useful Links</h2> <ul> <li><a href="https://outlyer.space/">Outlyer.space</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul> <hr/> <p>Thanks for reading! Feedback and suggestions from the SatNOGs community are very welcome — especially regarding improving reception from an omnidirectional setup in an urban environment.</p>]]></content><author><name></name></author><category term="outlyer.space"/><category term="satnogs,"/><category term="ground-station,"/><category term="omni-antenna"/><summary type="html"><![CDATA[A summary of my internship project with Outlyer.space to develop a non-rotary ground station in Egypt.]]></summary></entry><entry><title type="html">SatNOGs Ground Station</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/satnogs/" rel="alternate" type="text/html" title="SatNOGs Ground Station"/><published>2025-08-25T01:00:00+00:00</published><updated>2025-08-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/satnogs</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/satnogs/"><![CDATA[<h1 id="egypt-satnogs-non-rotary-build">Egypt SatNOGs Non-Rotary Build</h1> <h2 id="project-overview">Project Overview</h2> <p><strong>Project</strong>: A SatNOGs non-rotary omnidirectional ground station with two Power Distribution Units for a future rotator system.<br/> <strong>Company</strong>: <a href="https://outlyer.space/">Outlyer</a><br/> <strong>Timeline</strong>: Feb – Sep 25, 2025 (~30 weeks)</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/8-480.webp 480w,/hamza-folio/assets/img/satnogs/8-800.webp 800w,/hamza-folio/assets/img/satnogs/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="introduction">Introduction</h2> <p>This blog will take you through all the challenges that turned a 5–6 week project into a <strong>30-week</strong> simple ground station. By now I assume that the reader knows what <a href="https://satnogs.org/">SatNOGs</a> is, and if not, you can look it up. Before getting started, I would like to genuinely thank Ralph, the founder of <a href="https://outlyer.space/">Outlyer.space</a>, for this unique opportunity — I doubt I could have found it anywhere else. Not only did I learn about satellites, antennas, and ground stations, I also understood how “funny” it is to ship a simple electronic item to Egypt.</p> <h2 id="first-build">First Build</h2> <p>On the first build attempt, I was new to SatNOGs and everything related, but following the basic omnidirectional build from the SatNOGs tutorial made it really simple <a href="https://wiki.satnogs.org/Omnidirectional_Station_How_To">https://wiki.satnogs.org/Omnidirectional_Station_How_To</a>.<br/> The plan was simple: connect an omnidirectional antenna to a general-purpose LNA, which is connected to a NooElec SDR on the other side, and finally all connected to a Raspberry Pi 5.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/5-480.webp 480w,/hamza-folio/assets/img/satnogs/5-800.webp 800w,/hamza-folio/assets/img/satnogs/5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Mount everything on a <a href="https://deskpi.com/products/deskpi-rackmate-t0-black-version-rackmount-10-inch-4u-server-cabinet-for-network-servers-audio-and-video-equipment">DeskPi RackMate</a>, mount the Raspberry Pi on the <a href="https://deskpi.com/products/deskpi-kl-p24-raspberry-pi-adapter-board?_pos=5&amp;_sid=2d380a52d&amp;_ss=r">DeskPi KL-P24</a> shelf, and finally connect everything to the <a href="https://deskpi.com/products/deskpi-dc-pdu-lite-7-ch-0-5u-for-deskpi-rackmate-t1?_pos=1&amp;_sid=f10dbf8b5&amp;_ss=r">DeskPi DC PDU Lite</a>.</p> <h3 id="issues">Issues</h3> <h4 id="shipping">Shipping</h4> <p>While it might seem simple, there were two major issues. The first was Egyptian customs — they were doing a great job reviewing the products shipped; however, that wasn’t in our favor since shipping a single product would take up to a month.</p> <h4 id="power">Power</h4> <p>The second major issue was that the DeskPi PDU had a voltage drop of around 0.4 V per output channel due to the safety diodes connected, and that not being specified in the wiki led me to use an ammeter to read voltage and current across output channels to solve the issue of why my Pi was not booting.</p> <p>Initially I thought not enough amps were being supplied, so I purchased a 10 A 5 V adapter, which obviously did not solve the problem. After contacting DeskPi support, I was informed that the PDU was not designed for 5 V. They recommended checking out the <a href="https://52pi.com/collections/new-arrivals/products/52pi-4-usb-channel-5v-power-supply-module-for-raspberry-pi-pico-0-91-inch-oled-screen-compatible-with-1u-rack-mounting">52Pi 4 USB-Channel 5 V Power Supply Module</a>.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/10-480.webp 480w,/hamza-folio/assets/img/satnogs/10-800.webp 800w,/hamza-folio/assets/img/satnogs/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="new-build-dual-pdu">New Build: Dual PDU</h2> <p>In the new build, I attached the 52Pi PDU unit to the first PDU so they could both feed one another. The new PDU and Raspberry Pi are mounted securely on a <a href="google.com">DeskPi DP-0039 Bracket</a>. This new build allowed isolation of power to all 5 V components while making use of the PDU we had already bought for future development.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/11-480.webp 480w,/hamza-folio/assets/img/satnogs/11-800.webp 800w,/hamza-folio/assets/img/satnogs/11-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/9-480.webp 480w,/hamza-folio/assets/img/satnogs/9-800.webp 800w,/hamza-folio/assets/img/satnogs/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Finally, the final build of this long journey is ready to capture its first observation.</p> <h3 id="performance-on-noaa-satellite-reception">Performance on NOAA Satellite Reception</h3> <p>As expected from the omnidirectional antenna, even being on the 5th floor I wasn’t able to capture a meaningful signal. However, a faint signal is detected and can be seen by eye.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/satnogs/12-480.webp 480w,/hamza-folio/assets/img/satnogs/12-800.webp 800w,/hamza-folio/assets/img/satnogs/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/satnogs/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://outlyer.space/">Outlyer.space</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="outlyer.space"/><category term="communication"/><summary type="html"><![CDATA[Summing up my internship journey with Outlyer.space to build a non-rotatory ground station.]]></summary></entry><entry><title type="html">Multiple Recording Feature</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week11/" rel="alternate" type="text/html" title="Multiple Recording Feature"/><published>2025-08-11T01:00:00+00:00</published><updated>2025-08-11T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week11</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week11/"><![CDATA[<h2 id="fm-receiver-app--week-11-update">FM Receiver App – Week 11 Update</h2> <p>This week’s progress:</p> <ol> <li>Added <strong>Multiple Recording</strong> feature (in development)</li> <li>New <strong>Station Button</strong> widget</li> <li>Auto-select SDR if only one device detected</li> <li>Fixed flowgraph crash on app close</li> <li>New <strong>Info Window</strong> widget for notifications</li> </ol> <hr/> <h3 id="multiple-recording-feature">Multiple Recording Feature</h3> <p>The app now supports concurrent recording of multiple stations in the background, limited by SDR bandwidth (RTL-SDR: 2 MHz).<br/> At most, it can handle three 200 kHz FM stations with 100 kHz separation. Bandwidth constraints mean users can only record streams within their SDR’s range.</p> <p>The initial plan used a <strong>polyphase channelizer</strong> to split FM channels, directing selected ones to WAV sinks and others to null sinks.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/flowgraph-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/flowgraph.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/flowgraph2-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph2-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/flowgraph2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="why-this-approach-failed">Why this approach failed</h4> <p>With stations at 88.7 MHz and 88.2 MHz, the 200 kHz step missed some channels, while a 100 kHz step captured far more than needed.<br/> Instead, I switched to <strong>frequency shifting with offsets</strong>.</p> <h4 id="hierarchical-block-solution">Hierarchical Block Solution</h4> <p>I built a hierarchical block that:</p> <ul> <li>Accepts an input stream</li> <li>Frequency-shifts and isolates a station</li> <li>Demodulates</li> <li>Saves output to a WAV file</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/recorder-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/recorder-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/recorder-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/recorder.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>A <strong>multiple recorder</strong> function attaches/detaches these blocks to/from the SDR source via station record buttons. It checks if the station’s frequency is within bandwidth before recording.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Code snippet
</span>
            <span class="c1"># Create and store the recorder instance, tuned with frequency offset
</span>            <span class="n">self</span><span class="p">.</span><span class="n">recorders</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
                <span class="nc">MultipleRecorder</span><span class="p">(</span>
                    <span class="n">fname</span><span class="o">=</span><span class="n">file_name</span><span class="p">,</span>
                    <span class="n">freq</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">get_freq</span><span class="p">()</span> <span class="o">+</span> <span class="nf">int</span><span class="p">(</span><span class="n">freq_off</span><span class="p">),</span>
                    <span class="n">freq_offset</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="n">freq_off</span><span class="p">),</span>
                <span class="p">)</span>
            <span class="p">)</span>

            <span class="c1"># Connect FM receiver's output channel to the new recorder
</span>            <span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span>
                <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="n">blocks_selector_0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">recorders</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">)</span>
</code></pre></div></div> <p>After testing, the recordings work as expected.</p> <hr/> <h3 id="new-station-buttons">New Station Buttons</h3> <p>Station buttons are now a dedicated class handling station deletion, recording, and selection.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/station_btn-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/station_btn-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/station_btn-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/station_btn.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="auto-select-sdr">Auto-select SDR</h3> <p>If only one SDR device is available, the app now selects it automatically.</p> <hr/> <h3 id="fixed-config-manager">Fixed Config Manager</h3> <p>The config manager wasn’t saving because the close event method name was wrong.<br/> After renaming it to <code class="language-plaintext highlighter-rouge">def closeEvent(self, event):</code>, configuration saving/loading now works.</p> <hr/> <h3 id="notification-window">Notification Window</h3> <p>A new notification class alerts the user when an action isn’t possible—e.g., trying to record a station outside the current SDR bandwidth.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/notification-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/notification-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/notification-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/notification.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="known-issues">Known Issues</h3> <ul> <li> <p><strong>Center frequency changes during recording</strong> cause some channels to record noise.<br/> Plan: stop all active recordings if the user changes the tuned station.<br/> Example: Recording 88.5 and 88.7 MHz, then tuning to 107 MHz will result in noise.</p> </li> <li> <p><strong>Hardcoded SDR bandwidth &amp; decimation</strong> (currently 1.92 MHz).<br/> Changing sample rate breaks FM demod and audio. Possible fix: use a rational resampler to standardize flowgraph input rates.</p> </li> </ul> <hr/> <h3 id="next-steps">Next Steps</h3> <ul> <li>Implement “stop all recordings” on frequency change</li> <li>Improve documentation</li> <li>Enhance FM detection</li> <li>Wrap project up for final submission</li> </ul> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[This week’s focus was implementing multiple recording functionality in the application.]]></summary></entry><entry><title type="html">SDR Device and Code Documenting</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week10/" rel="alternate" type="text/html" title="SDR Device and Code Documenting"/><published>2025-08-04T01:00:00+00:00</published><updated>2025-08-04T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week10</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week10/"><![CDATA[<h2 id="fm-receiver-app--week-10-update">FM Receiver App – Week 10 Update</h2> <p>This week I made progress on the following topics:</p> <ol> <li>Fixed toggle issue during scanning</li> <li>Added SDR Config Manager</li> <li>Mkdocs Server</li> <li>Debugged the Config Manager</li> </ol> <hr/> <h3 id="fixed-toggle-issue-during-scanning">Fixed toggle issue during scanning</h3> <p>Previously, during scanning the toggle of the listen button would switch and it would appear checked when its not really checked, to fix this issue I edited the fm player function to set checkable according to the status of the mute.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">fm_player</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Toggle volume on/off</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">mute</span><span class="p">:</span> <span class="c1"># is muted --&gt; unmute
</span>            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">Stop Listening</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setChecked</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">set_mute</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>   <span class="c1"># not muted --&gt; mute
</span>            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">Listen</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setChecked</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">set_mute</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p>This ensures the listen button is checked only when listening</p> <hr/> <h3 id="sdr-config-manager">SDR Config Manager</h3> <p>The application now allows the user to choose a connected SDR device before proceeding, this avoid stack crash when the app doesnt detect the sdr device</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week10/sdr_config-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week10/sdr_config-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week10/sdr_config-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week10/sdr_config.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It automatically scans for avaliable sdr devices, and gets the serial of the detected device which is later used in the flowgraph as a parameter.</p> <hr/> <h3 id="mkdocs-server">Mkdocs Server</h3> <p>For the documentation part, I have added a docstring to every function in the main window, I have also added type hints for parameters. I also learned mkdocs to serve a web app on github pages. You can acess the page from here <a href="https://studhamza.github.io/GNU-Radio-FM-App/">docs</a></p> <hr/> <h3 id="next-steps">Next Steps</h3> <ul> <li>Documentation</li> </ul> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[This week, I added a sdr config window to auto detect and scan for SDR devices and lets the user choose which one to use. I also Fixed the toggle issue along with config manager problems]]></summary></entry><entry><title type="html">Record Feature</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week9/" rel="alternate" type="text/html" title="Record Feature"/><published>2025-07-25T01:00:00+00:00</published><updated>2025-07-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week9</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week9/"><![CDATA[<h2 id="fm-receiver-app--week-9-update">FM Receiver App – Week 9 Update</h2> <p>This week, I made solid progress on several fronts:</p> <ol> <li>Resolved an import issue in GRC</li> <li>Added audio recording functionality</li> <li>Implemented a top menu bar</li> <li>Debugged the Config Manager</li> </ol> <hr/> <h3 id="import-issue-fixed">Import Issue Fixed</h3> <p>Previously, GRC-generated Python code failed to correctly import my embedded block due to package-relative import conflicts. The solution was to manually register the module in <code class="language-plaintext highlighter-rouge">sys.modules</code> before launching the app:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flowgraphs</span> <span class="kn">import</span> <span class="n">rds_rx_epy_block_0</span>
<span class="n">sys</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="sh">"</span><span class="s">rds_rx_epy_block_0</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rds_rx_epy_block_0</span>

<span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">FMReceiverApp</span>
</code></pre></div></div> <p>This ensures Python knows where to find the block, avoiding import errors.</p> <hr/> <h3 id="audio-recording-functionality">Audio Recording Functionality</h3> <p>To enable recording, I added a <strong>WAV audio sink</strong> to the GRC flowgraph, connecting it to both audio channels. In the Python app, I used the following interface to manage audio streams:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span><span class="p">)</span> <span class="k">override</span><span class="p">;</span>
<span class="kt">void</span> <span class="n">close</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
</code></pre></div></div> <p>This lets users save recordings to custom locations.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week9/audio-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week9/audio-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week9/audio-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week9/audio.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="top-menu-bar">Top Menu Bar</h3> <p>I added a basic top menu that allows users to specify save paths for recordings. More features will be added here in the future.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week9/top_menu-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week9/top_menu-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week9/top_menu-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week9/top_menu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="debugging--lessons">Debugging &amp; Lessons</h3> <p>I initially thought the WAV files were silent due to a broken sink—but the issue was just missing audio playback software. Installing VLC confirmed the recordings were fine.</p> <p>Currently, I am having trouble with the config manager. I did not have enough time to tackle this issue yet, but I will work on the during the next week.</p> <hr/> <h3 id="next-steps">Next Steps</h3> <ul> <li>Improve the frontend UI</li> <li>Clean up and document the code (docstrings, type hints, README, usage examples)</li> <li>Continue development of the Config Manager</li> <li>Add debugging tools: <ul> <li>Next/Previous station buttons</li> <li>Volume slider</li> <li>Frequency slider</li> </ul> </li> </ul> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Audio Recording Function and Config Manager]]></summary></entry><entry><title type="html">Cleaning and Formatting</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week8/" rel="alternate" type="text/html" title="Cleaning and Formatting"/><published>2025-07-18T01:00:00+00:00</published><updated>2025-07-18T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week8</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week8/"><![CDATA[<h2 id="fm-receiver-app--week-8-update">FM Receiver App – Week 8 Update</h2> <p>Due to the recent fire in the Egypt telecommunication building, I was unable to work last week; however, this week I made progress in:</p> <ol> <li>Formatting code using pylint, isort, and mkdocs</li> <li>Adding audio visualization in the debug view</li> </ol> <hr/> <h3 id="code-formatting">Code Formatting</h3> <p>There is not much to say regarding this part. I just added pylint to the project and spent most of the time trying to clean my code.</p> <h3 id="new-features">New Features</h3> <ol> <li> <p>Audio visualization in debug view</p> </li> <li> <p>Added RDS panel to debug view</p> </li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week8/audio-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week8/audio-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week8/audio-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week8/audio.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="problems">Problems</h3> <p>This week’s problems are the same as last week’s—the import issue that GRC creates when generating the <code class="language-plaintext highlighter-rouge">.py</code> file. A new issue I ran into is that I can’t use the same widget twice for different views, so I either need to create two widgets or find a way to move them around when the user switches pages.</p> <p>Another important problem I noticed is how my scanner detects stations. It normalizes the input to detect candidate frequencies with higher power than the surrounding ones. While this approach seems reasonable, what if there are no stations? In that case, it will amplify the noise and try to detect stations that aren’t actually there. To fix this, it’s better to set a threshold before normalizing or use a statistical test to determine whether the SDR scan is just white noise or if there is an actual station present.</p> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Add record feature</li> <li>Add stereo and mono to debug view</li> <li>Work on Config Manager to load config during startup</li> <li>Add: next/prev station buttons, volume slider, frequency slider to debug view</li> <li>Might change UI to have controls always available</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Cleaning code to make it more friendly for contributors to join, using pylint, isort, and mkdocs Python packages]]></summary></entry><entry><title type="html">FM Detection and Debug View (Againnnnnn)</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week6/" rel="alternate" type="text/html" title="FM Detection and Debug View (Againnnnnn)"/><published>2025-07-03T01:00:00+00:00</published><updated>2025-07-03T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week6</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week6/"><![CDATA[<h2 id="fm-receiver-app--week-6-update">FM Receiver App – Week 6 Update</h2> <p><strong><em>Note</em>: This week’s focus was more on the scanner, little/No progress towards the debug view.</strong></p> <p>This week, I made progress in the following features:</p> <ol> <li>Enhanced and Optimized the Scanner</li> <li>Added some features to debug view –&gt; not complete</li> <li>Added features like saving configurations, mute feature</li> </ol> <hr/> <h3 id="optimized-scanner">Optimized Scanner</h3> <h4 id="last-weeks-scanner">Last Week’s Scanner</h4> <p>In order to understand how much better the new implementation is, we need to discuss the old implementation first.</p> <ol> <li> <p><strong>Non-GRC Approach</strong><br/> The detection logic is a Python function. The FM Scanner flowgraph would take a snapshot of the spectrum at center frequency and close, all detection logic was handled in the Python function.</p> </li> <li> <p><strong>Sharing SDR Resources</strong><br/> Using <code class="language-plaintext highlighter-rouge">del</code> to remove all instances of the flowgraph variable in Python in order to detach the SDR kernel before running the FM scanner flowgraph; because only one flowgraph can access the SDR resource.</p> </li> </ol> <h4 id="new-scanner">New Scanner</h4> <p>The new scanner uses a selector block to move the SDR stream between both modes, Scan and Play. I also moved the detection logic into a Python embedded Block.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/scanner_fg-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/scanner_fg-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/scanner_fg-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/scanner_fg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The detection block is a sink block with a pmt message done to indicate completion of scanning the current center frequency; and as long as the done flag is true, the detection logic will not use new SDR samples.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">input_items</span><span class="p">,</span> <span class="n">output_items</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">done</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> 
            <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># Done working reset the flag
</span>        
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1"># Accumulate samples
</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">num_items</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">compute_candidate_freqs</span><span class="p">()</span> 

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">fft_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">fft_size</span> <span class="o">&gt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
                <span class="k">break</span>
                
            <span class="n">data_chunk</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">self</span><span class="p">.</span><span class="n">fft_size</span><span class="p">]</span>
            
            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">station_bin</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">candidate_freqs_bin</span><span class="p">):</span>
                <span class="n">start_bin</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">station_bin</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">half_station_size</span><span class="p">)</span>
                <span class="n">end_bin</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">station_bin</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">half_station_size</span><span class="p">)</span>
                
                <span class="c1"># Ensure we don't go out of bounds
</span>                <span class="n">start_bin</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_bin</span><span class="p">)</span>
                <span class="n">end_bin</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data_chunk</span><span class="p">),</span> <span class="n">end_bin</span><span class="p">)</span>
                
                <span class="k">if</span> <span class="n">start_bin</span> <span class="o">&lt;</span> <span class="n">end_bin</span><span class="p">:</span>
                    <span class="n">potential_station</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">data_chunk</span><span class="p">[</span><span class="n">start_bin</span><span class="p">:</span><span class="n">end_bin</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">power_per_station</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">potential_station</span>


        <span class="n">normalized_power_per_station</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">normalize</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">power_per_station</span><span class="p">)</span>

        <span class="c1"># Find active stations
</span>        <span class="n">active_indices</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">normalized_power_per_station</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">threshold</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

        <span class="c1"># Group adjacent active indices
</span>        <span class="n">groups</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">active_indices</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">group</span> <span class="o">=</span> <span class="p">[</span><span class="n">active_indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
            <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">active_indices</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
                <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">group</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">group</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">groups</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">groups</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>  <span class="c1"># append the last group
</span>
        <span class="c1"># Pick max power freq in each group
</span>        <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
            <span class="n">max_idx</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">normalized_power_per_station</span><span class="p">[</span><span class="n">group</span><span class="p">])]</span>
  
            <span class="n">self</span><span class="p">.</span><span class="n">detected_stations</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">candidate_freqs</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">done</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">pmt</span><span class="p">.</span><span class="nf">cons</span><span class="p">(</span><span class="n">pmt</span><span class="p">.</span><span class="nf">intern</span><span class="p">(</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">),</span> <span class="n">pmt</span><span class="p">.</span><span class="nf">from_double</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">message_port_pub</span><span class="p">(</span><span class="n">pmt</span><span class="p">.</span><span class="nf">intern</span><span class="p">(</span><span class="sh">"</span><span class="s">done</span><span class="sh">"</span><span class="p">),</span> <span class="n">msg</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">clean_up</span><span class="p">()</span>
        	
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div> <p>In order to monitor everything without halting the application, I created a <code class="language-plaintext highlighter-rouge">QThread</code> in <code class="language-plaintext highlighter-rouge">src/fm_receiver/gui/scan_thread.py</code>. This will let the application run while scanning by continuously monitoring the scanning progress.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">freq</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">start_freq</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Running scanning monitor</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">_is_running</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="nf">get_done</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">_is_running</span><span class="p">:</span>
                    <span class="k">return</span>
                <span class="n">QThread</span><span class="p">.</span><span class="nf">msleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="c1"># Don't hog the CPU
</span>            <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Scanning </span><span class="si">{</span><span class="n">freq</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">freq</span> <span class="o">+=</span> <span class="mf">1e6</span>
            <span class="k">if</span> <span class="n">freq</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">end_freq</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="n">self</span><span class="p">.</span><span class="n">progress</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="n">freq</span><span class="p">)</span>
            
            <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="nf">get_done</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">_is_running</span><span class="p">:</span>
                    <span class="k">return</span>
                <span class="n">QThread</span><span class="p">.</span><span class="nf">msleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

        <span class="c1"># Post-scan logic
</span>        <span class="n">self</span><span class="p">.</span><span class="n">finished</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p>Finally everything came together, after the scan is complete the main window handles the finish event by updating the station list and enabling the disabled buttons that prevented the user to listen to the audio during scanning process.</p> <h3 id="new-features">New Features</h3> <ol> <li>Added a mute feature that multiplies the volume by 0 if mute is on.</li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/mute-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/mute-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/mute-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/mute.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li> <p>Added a volume slider that maps volume from 0 to 100 to -20 to 10 (since it was configured like that in the RDS flowgraph)</p> </li> <li> <p>Added logic to <code class="language-plaintext highlighter-rouge">src/fm_receiver/core/config_manager.py</code> to handle saving stations</p> </li> <li> <p>Allowed control of the cutoff frequency and transition bandwidth of the baseband FIR filter</p> </li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/fir-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/fir-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/fir-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/fir.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="debug-view">Debug View</h3> <p>I am still working on the debug view, not much progress has been made since last week here. Just a change of UI widgets to allow control of flowgraph parameters along with visualizing how these parameters change different plots. In the image below you can now control the Frequency Xalting FIR, but still nothing more.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/debug-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/debug-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/debug-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/debug.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="problems">Problems</h3> <p>My problems are becoming more silly. The thing that drives me crazy is that when running the flowgraph, GNU Radio automatically edits the flowgraph.py to import the embedded Python block like this <code class="language-plaintext highlighter-rouge">import block as blk</code> so I have to manually edit the line to <code class="language-plaintext highlighter-rouge">from . import block as blk</code> which I know is silly but is still a problem.</p> <p>Other real problems include, that I want to reuse same widgets like RDS panel and radio control buttons (next/prev/listen) on different views, but PyQt allows a widget to only have one parent. Therefore I have two options, either to copy each widget and have multiple same widgets or I move widgets around according to how the user navigates the site. I also have another option, which is to remove the home page, and make all radio controls stick to the main window regardless of which page the user is on.</p> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Polish frontend</li> <li>Debug View</li> <li>Add more features: recording, config manager</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Changing the detection function]]></summary></entry><entry><title type="html">FM Detection and Debug View</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5/" rel="alternate" type="text/html" title="FM Detection and Debug View"/><published>2025-06-27T01:00:00+00:00</published><updated>2025-06-27T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5/"><![CDATA[<h2 id="fm-receiver-app--week-5-update">FM Receiver App – Week 5 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Implemented a FM Scanner</li> <li>Implemented features from debug view</li> </ol> <hr/> <h3 id="fm-scanner">FM Scanner</h3> <p>Compared to last week, this week’s approach to detecting FM stations is completely different. I decided to shift from using peak detection to a new method: computing the sum of frequency bins around each candidate frequency raster, then normalizing the data and applying a threshold. This approach was suggested by my mentor and a community member, FunkyLab. It leverages our existing knowledge about FM stations to help detect them more effectively.</p> <p>This approach takes advantage of the fact that FM stations are aligned to a 100 kHz raster—you’ll never find a station at, say, 87.765 MHz.</p> <p>However, since the output size is unknown, I couldn’t implement the entire logic within a single GRC flowgraph. Instead, I split the process: the scanning is handled by a flowgraph, and I wrote a custom Python function to perform the detection.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/fm_scanner.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The flowgraph above computes a \(2^7 = 128\) point FFT over a 2.048 MHz bandwidth centered around a given frequency. This means each FFT bin covers a bandwidth of:</p> \[\text{Bin Bandwidth} = \frac{2.048 \times 10^6}{128} = 16,000 \text{ Hz}\] <p>This information is useful because it allows us to estimate the size of an FM station in terms of bins. Since a typical FM station occupies approximately 200 kHz, the station size in bins is:</p> <p>\(\frac{200 \times 10^3}{16 \times 10^3} = 12.5 \text{ bins}\) That means to compute the power around a candidate station, you take 7 bins to the left and 7 bins to the right (14 bins total), sum their magnitudes, and assign the result as the power of that station candidate.</p> <div class="row"> <div class="col-sm mt-9 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/psd-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/psd-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/psd-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/psd.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/power_sum-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/power_sum-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/power_sum-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/power_sum.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Source Code:</strong> You can check out my detection function here: <a href="https://github.com/StudHamza/GNU-Radio-FM-App/blob/main/src/fm_receiver/utils/fm_scanner.py">src/fm_receiver/utils/fm_scanner.py</a>.</p> <h4 id="problem-with-this-approach">Problem with this approach</h4> <p>Now, there are some limitations to this approach, since we’re normalizing the data:</p> <ol> <li> <p><strong>Noise Amplification</strong><br/> If no channel falls within the bandwidth, this amplifies the noise. Additionally, if one channel significantly peaks above the rest, the threshold might fail to detect lower-power channels.</p> </li> <li> <p><strong>Adjacent Frequencies Detected as Stations</strong><br/> A second limitation is that adjacent candidate frequencies might be individually detected as stations. However, this can be easily overcome by eliminating adjacent frequencies and selecting the candidate with the highest power sum, since we know that stations should be at least 100 kHz apart.</p> </li> <li> <p><strong>Non-GRC Approach</strong><br/> The detection logic is a Python function. This breaks my modular design principle of wanting to run all DSP components within GNU Radio flowgraphs, and keep the code focused on the frontend.</p> </li> <li> <p><strong>Sharing SDR Resources</strong><br/> For now, my approach is to <code class="language-plaintext highlighter-rouge">del</code> the flowgraph variable in Python to detach the SDR kernel before running the FM scanner. I also used <code class="language-plaintext highlighter-rouge">QThread</code> to prevent the application from freezing during the scanning process.</p> </li> </ol> <h4 id="accuracy">Accuracy</h4> <p>This simple FM detector identifies up to 23 stations using my Nooelec Smart v5 and LNA configuration. I haven’t done much experimentation yet, but so far all detected stations are legitimate — I verified them by listening.</p> <p>Another possible verification approach is to detect the 19 kHz pilot tone in the FM-demodulated signal. Which brings us to the next topic, the debug view.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="debug-view">Debug View</h3> <p>The debug view is not complete yet. I’ve added some visualizations, but there should be more control over flowgraph variables such as filter taps, FM bandwidth, gain, volume, squelch, and other parameters.</p> <p>Currently, there are four tabs:</p> <ol> <li><strong>Rf band</strong> — 1024-point FFT of the scanned FM bandwidth</li> <li><strong>Waterfall</strong> — FFT representation of the filtered FM signal before demodulation</li> <li><strong>RDS panel</strong> — Constellation diagram for RDS (Radio Data System)</li> <li><strong>FM demod visualization</strong> — Time-domain or spectral view of the FM-demodulated audio</li> </ol> <p>In the debug view looks like this:</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rf_band-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rf_band.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/water_fall-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/water_fall.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rds-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rds-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rds-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rds.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> </swiper-container> <h3 id="improvement-ideas">Improvement Ideas</h3> <p>I need to find a way to improve the scanning part in the following areas:</p> <ol> <li> <p><strong>Efficiency</strong><br/> Currently, I detach the SDR kernel by deleting the flowgraph object (<code class="language-plaintext highlighter-rouge">del</code>). A better approach would be to manage SDR access more gracefully, without fully tearing down and rebuilding the flowgraph.</p> </li> <li> <p><strong>Interactivity</strong><br/> The scanner currently just outputs logs. I’d like to make it more interactive — for example, by integrating progress indicators, real-time spectrum updates, or UI feedback to improve the user experience.</p> </li> <li> <p><strong>Debug View Customization</strong><br/> I need to add more control variables to the debug view to allow users to customize parameters such as filter taps, FM bandwidth, gain, squelch, and volume in real time.</p> </li> </ol> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Enhance Advanced/Debug view, add more control</li> <li>Polish frontend</li> <li>Add record stream feature</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[FM Scanner and Debug view]]></summary></entry></feed>