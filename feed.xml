<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://studhamza.github.io/hamza-folio/feed.xml" rel="self" type="application/atom+xml"/><link href="https://studhamza.github.io/hamza-folio/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-25T10:56:13+00:00</updated><id>https://studhamza.github.io/hamza-folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Documentation and Soapy Sdr source</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week12&13/" rel="alternate" type="text/html" title="Documentation and Soapy Sdr source"/><published>2025-08-25T01:00:00+00:00</published><updated>2025-08-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week12&amp;13</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week12&amp;13/"><![CDATA[<h2 id="fm-receiver-app--week-12-and-13-update">FM Receiver App – Week 12 and 13 Update</h2> <p>We’re coming to an end and these 2 weeks progress we’re documenting and fixing small bugs. Week 13s progress was the following topics:</p> <ol> <li>Improve Documentations, READMEs in each directory along with mkdocs github page</li> <li>Use soapy SDR source instead of osmocom</li> </ol> <hr/> <hr/> <h3 id="documentation">Documentation</h3> <p>Its time to wrap things up and document my FM application, I added a README file in each directory that explains the files and function of each directory; making it easier for new contributors to understand the project structure. I also created a mkdocs web page with in depth tutorial that explains each concept that i implemented in the project.</p> <p>Check out the github page here <a href="https://studhamza.github.io/GNU-Radio-FM-App/">https://studhamza.github.io/GNU-Radio-FM-App/</a></p> <h3 id="soapy-sdr-source">SOAPY SDR source</h3> <p>The SoapySDR Source block is deprecated, but the <code class="language-plaintext highlighter-rouge">soapy_custom_source</code> block is not. I updated my code to use <code class="language-plaintext highlighter-rouge">soapy_custom_source</code> in order to avoid the additional dependencies of the Osmocom library. In addiction, since I am already using the SoapySDR Python bindings to detect connected devices, it made sense to use the <code class="language-plaintext highlighter-rouge">soapy_custom_source</code> block as well.</p> <p><img src="/assets/img/gnu_radio/week12&amp;13/soapy.png" alt="Soapy Custom Source"/></p> <p>I have also noticed that there is no documentation for this block, maybe I need to contribute to the GNU Radio Docs.</p> <h2 id="end">End</h2> <p>Finally, this project has come to an end, there are plenty of suggested improvements that I might work on before the final submission</p> <ol> <li>Allow Sample Rate Change</li> <li>Improve FM detection logic</li> <li>Calculate Station strength and display it</li> </ol> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[This week’s focus was documentation and SOAPY SDR source]]></summary></entry><entry><title type="html">Multiple Recording Feature</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week11/" rel="alternate" type="text/html" title="Multiple Recording Feature"/><published>2025-08-11T01:00:00+00:00</published><updated>2025-08-11T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week11</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week11/"><![CDATA[<h2 id="fm-receiver-app--week-11-update">FM Receiver App – Week 11 Update</h2> <p>This week’s progress:</p> <ol> <li>Added <strong>Multiple Recording</strong> feature (in development)</li> <li>New <strong>Station Button</strong> widget</li> <li>Auto-select SDR if only one device detected</li> <li>Fixed flowgraph crash on app close</li> <li>New <strong>Info Window</strong> widget for notifications</li> </ol> <hr/> <h3 id="multiple-recording-feature">Multiple Recording Feature</h3> <p>The app now supports concurrent recording of multiple stations in the background, limited by SDR bandwidth (RTL-SDR: 2 MHz).<br/> At most, it can handle three 200 kHz FM stations with 100 kHz separation. Bandwidth constraints mean users can only record streams within their SDR’s range.</p> <p>The initial plan used a <strong>polyphase channelizer</strong> to split FM channels, directing selected ones to WAV sinks and others to null sinks.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/flowgraph-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/flowgraph.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/flowgraph2-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph2-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/flowgraph2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/flowgraph2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="why-this-approach-failed">Why this approach failed</h4> <p>With stations at 88.7 MHz and 88.2 MHz, the 200 kHz step missed some channels, while a 100 kHz step captured far more than needed.<br/> Instead, I switched to <strong>frequency shifting with offsets</strong>.</p> <h4 id="hierarchical-block-solution">Hierarchical Block Solution</h4> <p>I built a hierarchical block that:</p> <ul> <li>Accepts an input stream</li> <li>Frequency-shifts and isolates a station</li> <li>Demodulates</li> <li>Saves output to a WAV file</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/recorder-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/recorder-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/recorder-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/recorder.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>A <strong>multiple recorder</strong> function attaches/detaches these blocks to/from the SDR source via station record buttons. It checks if the station’s frequency is within bandwidth before recording.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Code snippet
</span>
            <span class="c1"># Create and store the recorder instance, tuned with frequency offset
</span>            <span class="n">self</span><span class="p">.</span><span class="n">recorders</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
                <span class="nc">MultipleRecorder</span><span class="p">(</span>
                    <span class="n">fname</span><span class="o">=</span><span class="n">file_name</span><span class="p">,</span>
                    <span class="n">freq</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">get_freq</span><span class="p">()</span> <span class="o">+</span> <span class="nf">int</span><span class="p">(</span><span class="n">freq_off</span><span class="p">),</span>
                    <span class="n">freq_offset</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="n">freq_off</span><span class="p">),</span>
                <span class="p">)</span>
            <span class="p">)</span>

            <span class="c1"># Connect FM receiver's output channel to the new recorder
</span>            <span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span>
                <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="n">blocks_selector_0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">recorders</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">)</span>
</code></pre></div></div> <p>After testing, the recordings work as expected.</p> <hr/> <h3 id="new-station-buttons">New Station Buttons</h3> <p>Station buttons are now a dedicated class handling station deletion, recording, and selection.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/station_btn-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/station_btn-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/station_btn-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/station_btn.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="auto-select-sdr">Auto-select SDR</h3> <p>If only one SDR device is available, the app now selects it automatically.</p> <hr/> <h3 id="fixed-config-manager">Fixed Config Manager</h3> <p>The config manager wasn’t saving because the close event method name was wrong.<br/> After renaming it to <code class="language-plaintext highlighter-rouge">def closeEvent(self, event):</code>, configuration saving/loading now works.</p> <hr/> <h3 id="notification-window">Notification Window</h3> <p>A new notification class alerts the user when an action isn’t possible—e.g., trying to record a station outside the current SDR bandwidth.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week11/notification-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week11/notification-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week11/notification-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week11/notification.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="known-issues">Known Issues</h3> <ul> <li> <p><strong>Center frequency changes during recording</strong> cause some channels to record noise.<br/> Plan: stop all active recordings if the user changes the tuned station.<br/> Example: Recording 88.5 and 88.7 MHz, then tuning to 107 MHz will result in noise.</p> </li> <li> <p><strong>Hardcoded SDR bandwidth &amp; decimation</strong> (currently 1.92 MHz).<br/> Changing sample rate breaks FM demod and audio. Possible fix: use a rational resampler to standardize flowgraph input rates.</p> </li> </ul> <hr/> <h3 id="next-steps">Next Steps</h3> <ul> <li>Implement “stop all recordings” on frequency change</li> <li>Improve documentation</li> <li>Enhance FM detection</li> <li>Wrap project up for final submission</li> </ul> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[This week’s focus was implementing multiple recording functionality in the application.]]></summary></entry><entry><title type="html">SDR Device and Code Documenting</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week10/" rel="alternate" type="text/html" title="SDR Device and Code Documenting"/><published>2025-08-04T01:00:00+00:00</published><updated>2025-08-04T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week10</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week10/"><![CDATA[<h2 id="fm-receiver-app--week-10-update">FM Receiver App – Week 10 Update</h2> <p>This week I made progress on the following topics:</p> <ol> <li>Fixed toggle issue during scanning</li> <li>Added SDR Config Manager</li> <li>Mkdocs Server</li> <li>Debugged the Config Manager</li> </ol> <hr/> <h3 id="fixed-toggle-issue-during-scanning">Fixed toggle issue during scanning</h3> <p>Previously, during scanning the toggle of the listen button would switch and it would appear checked when its not really checked, to fix this issue I edited the fm player function to set checkable according to the status of the mute.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">fm_player</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Toggle volume on/off</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">mute</span><span class="p">:</span> <span class="c1"># is muted --&gt; unmute
</span>            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">Stop Listening</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setChecked</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">set_mute</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>   <span class="c1"># not muted --&gt; mute
</span>            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">Listen</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">mute_button</span><span class="p">.</span><span class="nf">setChecked</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">set_mute</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p>This ensures the listen button is checked only when listening</p> <hr/> <h3 id="sdr-config-manager">SDR Config Manager</h3> <p>The application now allows the user to choose a connected SDR device before proceeding, this avoid stack crash when the app doesnt detect the sdr device</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week10/sdr_config-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week10/sdr_config-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week10/sdr_config-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week10/sdr_config.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It automatically scans for avaliable sdr devices, and gets the serial of the detected device which is later used in the flowgraph as a parameter.</p> <hr/> <h3 id="mkdocs-server">Mkdocs Server</h3> <p>For the documentation part, I have added a docstring to every function in the main window, I have also added type hints for parameters. I also learned mkdocs to serve a web app on github pages. You can acess the page from here <a href="https://studhamza.github.io/GNU-Radio-FM-App/">docs</a></p> <hr/> <h3 id="next-steps">Next Steps</h3> <ul> <li>Documentation</li> </ul> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[This week, I added a sdr config window to auto detect and scan for SDR devices and lets the user choose which one to use. I also Fixed the toggle issue along with config manager problems]]></summary></entry><entry><title type="html">Record Feature</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week9/" rel="alternate" type="text/html" title="Record Feature"/><published>2025-07-25T01:00:00+00:00</published><updated>2025-07-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week9</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week9/"><![CDATA[<h2 id="fm-receiver-app--week-9-update">FM Receiver App – Week 9 Update</h2> <p>This week, I made solid progress on several fronts:</p> <ol> <li>Resolved an import issue in GRC</li> <li>Added audio recording functionality</li> <li>Implemented a top menu bar</li> <li>Debugged the Config Manager</li> </ol> <hr/> <h3 id="import-issue-fixed">Import Issue Fixed</h3> <p>Previously, GRC-generated Python code failed to correctly import my embedded block due to package-relative import conflicts. The solution was to manually register the module in <code class="language-plaintext highlighter-rouge">sys.modules</code> before launching the app:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flowgraphs</span> <span class="kn">import</span> <span class="n">rds_rx_epy_block_0</span>
<span class="n">sys</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="sh">"</span><span class="s">rds_rx_epy_block_0</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rds_rx_epy_block_0</span>

<span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">FMReceiverApp</span>
</code></pre></div></div> <p>This ensures Python knows where to find the block, avoiding import errors.</p> <hr/> <h3 id="audio-recording-functionality">Audio Recording Functionality</h3> <p>To enable recording, I added a <strong>WAV audio sink</strong> to the GRC flowgraph, connecting it to both audio channels. In the Python app, I used the following interface to manage audio streams:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span><span class="p">)</span> <span class="k">override</span><span class="p">;</span>
<span class="kt">void</span> <span class="n">close</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
</code></pre></div></div> <p>This lets users save recordings to custom locations.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week9/audio-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week9/audio-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week9/audio-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week9/audio.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="top-menu-bar">Top Menu Bar</h3> <p>I added a basic top menu that allows users to specify save paths for recordings. More features will be added here in the future.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week9/top_menu-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week9/top_menu-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week9/top_menu-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week9/top_menu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="debugging--lessons">Debugging &amp; Lessons</h3> <p>I initially thought the WAV files were silent due to a broken sink—but the issue was just missing audio playback software. Installing VLC confirmed the recordings were fine.</p> <p>Currently, I am having trouble with the config manager. I did not have enough time to tackle this issue yet, but I will work on the during the next week.</p> <hr/> <h3 id="next-steps">Next Steps</h3> <ul> <li>Improve the frontend UI</li> <li>Clean up and document the code (docstrings, type hints, README, usage examples)</li> <li>Continue development of the Config Manager</li> <li>Add debugging tools: <ul> <li>Next/Previous station buttons</li> <li>Volume slider</li> <li>Frequency slider</li> </ul> </li> </ul> <hr/> <p><strong>Useful Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">All Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Audio Recording Function and Config Manager]]></summary></entry><entry><title type="html">Cleaning and Formatting</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week8/" rel="alternate" type="text/html" title="Cleaning and Formatting"/><published>2025-07-18T01:00:00+00:00</published><updated>2025-07-18T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week8</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week8/"><![CDATA[<h2 id="fm-receiver-app--week-8-update">FM Receiver App – Week 8 Update</h2> <p>Due to the recent fire in the Egypt telecommunication building, I was unable to work last week; however, this week I made progress in:</p> <ol> <li>Formatting code using pylint, isort, and mkdocs</li> <li>Adding audio visualization in the debug view</li> </ol> <hr/> <h3 id="code-formatting">Code Formatting</h3> <p>There is not much to say regarding this part. I just added pylint to the project and spent most of the time trying to clean my code.</p> <h3 id="new-features">New Features</h3> <ol> <li> <p>Audio visualization in debug view</p> </li> <li> <p>Added RDS panel to debug view</p> </li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week8/audio-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week8/audio-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week8/audio-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week8/audio.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="problems">Problems</h3> <p>This week’s problems are the same as last week’s—the import issue that GRC creates when generating the <code class="language-plaintext highlighter-rouge">.py</code> file. A new issue I ran into is that I can’t use the same widget twice for different views, so I either need to create two widgets or find a way to move them around when the user switches pages.</p> <p>Another important problem I noticed is how my scanner detects stations. It normalizes the input to detect candidate frequencies with higher power than the surrounding ones. While this approach seems reasonable, what if there are no stations? In that case, it will amplify the noise and try to detect stations that aren’t actually there. To fix this, it’s better to set a threshold before normalizing or use a statistical test to determine whether the SDR scan is just white noise or if there is an actual station present.</p> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Add record feature</li> <li>Add stereo and mono to debug view</li> <li>Work on Config Manager to load config during startup</li> <li>Add: next/prev station buttons, volume slider, frequency slider to debug view</li> <li>Might change UI to have controls always available</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Cleaning code to make it more friendly for contributors to join, using pylint, isort, and mkdocs Python packages]]></summary></entry><entry><title type="html">FM Detection and Debug View (Againnnnnn)</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week6/" rel="alternate" type="text/html" title="FM Detection and Debug View (Againnnnnn)"/><published>2025-07-03T01:00:00+00:00</published><updated>2025-07-03T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week6</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week6/"><![CDATA[<h2 id="fm-receiver-app--week-6-update">FM Receiver App – Week 6 Update</h2> <p><strong><em>Note</em>: This week’s focus was more on the scanner, little/No progress towards the debug view.</strong></p> <p>This week, I made progress in the following features:</p> <ol> <li>Enhanced and Optimized the Scanner</li> <li>Added some features to debug view –&gt; not complete</li> <li>Added features like saving configurations, mute feature</li> </ol> <hr/> <h3 id="optimized-scanner">Optimized Scanner</h3> <h4 id="last-weeks-scanner">Last Week’s Scanner</h4> <p>In order to understand how much better the new implementation is, we need to discuss the old implementation first.</p> <ol> <li> <p><strong>Non-GRC Approach</strong><br/> The detection logic is a Python function. The FM Scanner flowgraph would take a snapshot of the spectrum at center frequency and close, all detection logic was handled in the Python function.</p> </li> <li> <p><strong>Sharing SDR Resources</strong><br/> Using <code class="language-plaintext highlighter-rouge">del</code> to remove all instances of the flowgraph variable in Python in order to detach the SDR kernel before running the FM scanner flowgraph; because only one flowgraph can access the SDR resource.</p> </li> </ol> <h4 id="new-scanner">New Scanner</h4> <p>The new scanner uses a selector block to move the SDR stream between both modes, Scan and Play. I also moved the detection logic into a Python embedded Block.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/scanner_fg-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/scanner_fg-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/scanner_fg-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/scanner_fg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The detection block is a sink block with a pmt message done to indicate completion of scanning the current center frequency; and as long as the done flag is true, the detection logic will not use new SDR samples.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">input_items</span><span class="p">,</span> <span class="n">output_items</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">done</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> 
            <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># Done working reset the flag
</span>        
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1"># Accumulate samples
</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">num_items</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">compute_candidate_freqs</span><span class="p">()</span> 

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">fft_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">fft_size</span> <span class="o">&gt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
                <span class="k">break</span>
                
            <span class="n">data_chunk</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">self</span><span class="p">.</span><span class="n">fft_size</span><span class="p">]</span>
            
            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">station_bin</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">candidate_freqs_bin</span><span class="p">):</span>
                <span class="n">start_bin</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">station_bin</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">half_station_size</span><span class="p">)</span>
                <span class="n">end_bin</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">station_bin</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">half_station_size</span><span class="p">)</span>
                
                <span class="c1"># Ensure we don't go out of bounds
</span>                <span class="n">start_bin</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_bin</span><span class="p">)</span>
                <span class="n">end_bin</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data_chunk</span><span class="p">),</span> <span class="n">end_bin</span><span class="p">)</span>
                
                <span class="k">if</span> <span class="n">start_bin</span> <span class="o">&lt;</span> <span class="n">end_bin</span><span class="p">:</span>
                    <span class="n">potential_station</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">data_chunk</span><span class="p">[</span><span class="n">start_bin</span><span class="p">:</span><span class="n">end_bin</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">power_per_station</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">potential_station</span>


        <span class="n">normalized_power_per_station</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">normalize</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">power_per_station</span><span class="p">)</span>

        <span class="c1"># Find active stations
</span>        <span class="n">active_indices</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">normalized_power_per_station</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">threshold</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

        <span class="c1"># Group adjacent active indices
</span>        <span class="n">groups</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">active_indices</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">group</span> <span class="o">=</span> <span class="p">[</span><span class="n">active_indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
            <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">active_indices</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
                <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">group</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">group</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">groups</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">groups</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>  <span class="c1"># append the last group
</span>
        <span class="c1"># Pick max power freq in each group
</span>        <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
            <span class="n">max_idx</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">normalized_power_per_station</span><span class="p">[</span><span class="n">group</span><span class="p">])]</span>
  
            <span class="n">self</span><span class="p">.</span><span class="n">detected_stations</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">candidate_freqs</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">done</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">pmt</span><span class="p">.</span><span class="nf">cons</span><span class="p">(</span><span class="n">pmt</span><span class="p">.</span><span class="nf">intern</span><span class="p">(</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">),</span> <span class="n">pmt</span><span class="p">.</span><span class="nf">from_double</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">message_port_pub</span><span class="p">(</span><span class="n">pmt</span><span class="p">.</span><span class="nf">intern</span><span class="p">(</span><span class="sh">"</span><span class="s">done</span><span class="sh">"</span><span class="p">),</span> <span class="n">msg</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">clean_up</span><span class="p">()</span>
        	
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_items</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div> <p>In order to monitor everything without halting the application, I created a <code class="language-plaintext highlighter-rouge">QThread</code> in <code class="language-plaintext highlighter-rouge">src/fm_receiver/gui/scan_thread.py</code>. This will let the application run while scanning by continuously monitoring the scanning progress.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">freq</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">start_freq</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Running scanning monitor</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">_is_running</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="nf">get_done</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">_is_running</span><span class="p">:</span>
                    <span class="k">return</span>
                <span class="n">QThread</span><span class="p">.</span><span class="nf">msleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="c1"># Don't hog the CPU
</span>            <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Scanning </span><span class="si">{</span><span class="n">freq</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">freq</span> <span class="o">+=</span> <span class="mf">1e6</span>
            <span class="k">if</span> <span class="n">freq</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">end_freq</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="n">self</span><span class="p">.</span><span class="n">progress</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="n">freq</span><span class="p">)</span>
            
            <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">fm_receiver</span><span class="p">.</span><span class="nf">get_done</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">_is_running</span><span class="p">:</span>
                    <span class="k">return</span>
                <span class="n">QThread</span><span class="p">.</span><span class="nf">msleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

        <span class="c1"># Post-scan logic
</span>        <span class="n">self</span><span class="p">.</span><span class="n">finished</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p>Finally everything came together, after the scan is complete the main window handles the finish event by updating the station list and enabling the disabled buttons that prevented the user to listen to the audio during scanning process.</p> <h3 id="new-features">New Features</h3> <ol> <li>Added a mute feature that multiplies the volume by 0 if mute is on.</li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/mute-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/mute-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/mute-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/mute.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li> <p>Added a volume slider that maps volume from 0 to 100 to -20 to 10 (since it was configured like that in the RDS flowgraph)</p> </li> <li> <p>Added logic to <code class="language-plaintext highlighter-rouge">src/fm_receiver/core/config_manager.py</code> to handle saving stations</p> </li> <li> <p>Allowed control of the cutoff frequency and transition bandwidth of the baseband FIR filter</p> </li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/fir-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/fir-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/fir-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/fir.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="debug-view">Debug View</h3> <p>I am still working on the debug view, not much progress has been made since last week here. Just a change of UI widgets to allow control of flowgraph parameters along with visualizing how these parameters change different plots. In the image below you can now control the Frequency Xalting FIR, but still nothing more.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week6/debug-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week6/debug-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week6/debug-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week6/debug.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="problems">Problems</h3> <p>My problems are becoming more silly. The thing that drives me crazy is that when running the flowgraph, GNU Radio automatically edits the flowgraph.py to import the embedded Python block like this <code class="language-plaintext highlighter-rouge">import block as blk</code> so I have to manually edit the line to <code class="language-plaintext highlighter-rouge">from . import block as blk</code> which I know is silly but is still a problem.</p> <p>Other real problems include, that I want to reuse same widgets like RDS panel and radio control buttons (next/prev/listen) on different views, but PyQt allows a widget to only have one parent. Therefore I have two options, either to copy each widget and have multiple same widgets or I move widgets around according to how the user navigates the site. I also have another option, which is to remove the home page, and make all radio controls stick to the main window regardless of which page the user is on.</p> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Polish frontend</li> <li>Debug View</li> <li>Add more features: recording, config manager</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Changing the detection function]]></summary></entry><entry><title type="html">FM Detection and Debug View</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5/" rel="alternate" type="text/html" title="FM Detection and Debug View"/><published>2025-06-27T01:00:00+00:00</published><updated>2025-06-27T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5/"><![CDATA[<h2 id="fm-receiver-app--week-5-update">FM Receiver App – Week 5 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Implemented a FM Scanner</li> <li>Implemented features from debug view</li> </ol> <hr/> <h3 id="fm-scanner">FM Scanner</h3> <p>Compared to last week, this week’s approach to detecting FM stations is completely different. I decided to shift from using peak detection to a new method: computing the sum of frequency bins around each candidate frequency raster, then normalizing the data and applying a threshold. This approach was suggested by my mentor and a community member, FunkyLab. It leverages our existing knowledge about FM stations to help detect them more effectively.</p> <p>This approach takes advantage of the fact that FM stations are aligned to a 100 kHz raster—you’ll never find a station at, say, 87.765 MHz.</p> <p>However, since the output size is unknown, I couldn’t implement the entire logic within a single GRC flowgraph. Instead, I split the process: the scanning is handled by a flowgraph, and I wrote a custom Python function to perform the detection.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/fm_scanner.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The flowgraph above computes a \(2^7 = 128\) point FFT over a 2.048 MHz bandwidth centered around a given frequency. This means each FFT bin covers a bandwidth of:</p> \[\text{Bin Bandwidth} = \frac{2.048 \times 10^6}{128} = 16,000 \text{ Hz}\] <p>This information is useful because it allows us to estimate the size of an FM station in terms of bins. Since a typical FM station occupies approximately 200 kHz, the station size in bins is:</p> <p>\(\frac{200 \times 10^3}{16 \times 10^3} = 12.5 \text{ bins}\) That means to compute the power around a candidate station, you take 7 bins to the left and 7 bins to the right (14 bins total), sum their magnitudes, and assign the result as the power of that station candidate.</p> <div class="row"> <div class="col-sm mt-9 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/psd-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/psd-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/psd-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/psd.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/power_sum-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/power_sum-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/power_sum-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/power_sum.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Source Code:</strong> You can check out my detection function here: <a href="https://github.com/StudHamza/GNU-Radio-FM-App/blob/main/src/fm_receiver/utils/fm_scanner.py">src/fm_receiver/utils/fm_scanner.py</a>.</p> <h4 id="problem-with-this-approach">Problem with this approach</h4> <p>Now, there are some limitations to this approach, since we’re normalizing the data:</p> <ol> <li> <p><strong>Noise Amplification</strong><br/> If no channel falls within the bandwidth, this amplifies the noise. Additionally, if one channel significantly peaks above the rest, the threshold might fail to detect lower-power channels.</p> </li> <li> <p><strong>Adjacent Frequencies Detected as Stations</strong><br/> A second limitation is that adjacent candidate frequencies might be individually detected as stations. However, this can be easily overcome by eliminating adjacent frequencies and selecting the candidate with the highest power sum, since we know that stations should be at least 100 kHz apart.</p> </li> <li> <p><strong>Non-GRC Approach</strong><br/> The detection logic is a Python function. This breaks my modular design principle of wanting to run all DSP components within GNU Radio flowgraphs, and keep the code focused on the frontend.</p> </li> <li> <p><strong>Sharing SDR Resources</strong><br/> For now, my approach is to <code class="language-plaintext highlighter-rouge">del</code> the flowgraph variable in Python to detach the SDR kernel before running the FM scanner. I also used <code class="language-plaintext highlighter-rouge">QThread</code> to prevent the application from freezing during the scanning process.</p> </li> </ol> <h4 id="accuracy">Accuracy</h4> <p>This simple FM detector identifies up to 23 stations using my Nooelec Smart v5 and LNA configuration. I haven’t done much experimentation yet, but so far all detected stations are legitimate — I verified them by listening.</p> <p>Another possible verification approach is to detect the 19 kHz pilot tone in the FM-demodulated signal. Which brings us to the next topic, the debug view.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="debug-view">Debug View</h3> <p>The debug view is not complete yet. I’ve added some visualizations, but there should be more control over flowgraph variables such as filter taps, FM bandwidth, gain, volume, squelch, and other parameters.</p> <p>Currently, there are four tabs:</p> <ol> <li><strong>Rf band</strong> — 1024-point FFT of the scanned FM bandwidth</li> <li><strong>Waterfall</strong> — FFT representation of the filtered FM signal before demodulation</li> <li><strong>RDS panel</strong> — Constellation diagram for RDS (Radio Data System)</li> <li><strong>FM demod visualization</strong> — Time-domain or spectral view of the FM-demodulated audio</li> </ol> <p>In the debug view looks like this:</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rf_band-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rf_band.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/water_fall-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/water_fall.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rds-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rds-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rds-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rds.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> </swiper-container> <h3 id="improvement-ideas">Improvement Ideas</h3> <p>I need to find a way to improve the scanning part in the following areas:</p> <ol> <li> <p><strong>Efficiency</strong><br/> Currently, I detach the SDR kernel by deleting the flowgraph object (<code class="language-plaintext highlighter-rouge">del</code>). A better approach would be to manage SDR access more gracefully, without fully tearing down and rebuilding the flowgraph.</p> </li> <li> <p><strong>Interactivity</strong><br/> The scanner currently just outputs logs. I’d like to make it more interactive — for example, by integrating progress indicators, real-time spectrum updates, or UI feedback to improve the user experience.</p> </li> <li> <p><strong>Debug View Customization</strong><br/> I need to add more control variables to the debug view to allow users to customize parameters such as filter taps, FM bandwidth, gain, squelch, and volume in real time.</p> </li> </ol> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Enhance Advanced/Debug view, add more control</li> <li>Polish frontend</li> <li>Add record stream feature</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[FM Scanner and Debug view]]></summary></entry><entry><title type="html">RDS integration and FM Detection</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week4/" rel="alternate" type="text/html" title="RDS integration and FM Detection"/><published>2025-06-20T01:00:00+00:00</published><updated>2025-06-20T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week4</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week4/"><![CDATA[<h2 id="fm-receiver-app--week-4-update">FM Receiver App – Week 4 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Integrating gr-rds rds panel into my frontend application</li> <li>Improve over all GUI and add stylesheets</li> <li>Attempt to Create FM Scanner</li> </ol> <hr/> <h3 id="rds-integration--ui-change">RDS Integration &amp; UI Change</h3> <p>Following my last blog, integrating the RDS into my app was a piece of cake. First I moved things around, made some improvement to the UI. The new UI looks like this:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/rds_ui-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/rds_ui-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/rds_ui-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/rds_ui.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Then I used the RDS panel of the <a href="https://github.com/bastibl/gr-rds">gr-rds</a> OOT module in my application. First i had to import the new flowgraph block <code class="language-plaintext highlighter-rouge">from flowgraphs.rds_rx import rds_rx</code> then instantiate the new FM Receiver <code class="language-plaintext highlighter-rouge">self.rds_fm_receiver = rds_rx()</code> and save the variable <code class="language-plaintext highlighter-rouge">self.fm_receiver = self.rds_fm_receiver</code>, finally add the <code class="language-plaintext highlighter-rouge">self.rds_info = self.fm_receiver.rds_panel_0</code> to the home widget.</p> <h3 id="frequency-scanning">Frequency Scanning</h3> <p>My initial approach was to scan the spectrum, get the Power Spectral Density to identify candidate stations by their power and verify candidate stations are actually FM station by attempting demodulation and looking for <a href="https://en.wikipedia.org/wiki/Pilot_signal">19kHz pilot tone</a>.</p> <p>So in attempt to build the scanner, I first started working on the PSD part of the flow graph.</p> \[\text{PSD}(f) = 10 \cdot \log_{10} \left( |\text{FFT}(x(t))|^2 \right)\] <p>In the flowgraph it looks like this:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/pds_flow-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/pds_flow-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/pds_flow-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/pds_flow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This is my first attempt with a embedded python block to threshold the values.</p> <p>Other Attempts of thresholding are :</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/threshold2-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/threshold2-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/threshold2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/threshold2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/threshold3-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/threshold3-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/threshold3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/threshold3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>But later, I noticed that the threshold only works because I’m using the my LNA, when i removed it. No stations were detected regardless of the visible peaks, so I had to implement a relative threshold detector. Luckly the <a href="https://wiki.gnuradio.org/index.php/Peak_Detector2">Peak Detector 2</a> block in GNU Radio does that, so I converted the vector back to stream to detect the potential active stations.</p> <p>And finally its time to convert the 1024 fft bins to their coresponding frequencies, for that I used a embedded python block. It computes the frequency location using this equation:</p> \[f_i = f_c + \left(i - \frac{N}{2}\right) \cdot \frac{f_s}{N}, \quad \text{for } i = 0, 1, 2, \ldots, N - 1\] <p>And sends the output using a pmt message. The flowgraph until now looks like this:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/flowgraph-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/flowgraph.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/flowgraph2-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph2-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/flowgraph2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="problems">Problems</h4> <p>I’ve faced some difficulties implementing the scanner since some of the blocks only deal with streams (Threshold blocks) and others require vectors. It was also hard to visualize, since GNU Radio sinks lack any features to reverse the X-Y axis during plotting or plot frequency bins. But my biggest problem now is how to remove the variations of the detected stations. The threshold values keep deviating and do not stick to a specific value. One approach is to use an averaging function.</p> <p>The flow graph continuously outputs PMT messages for detected stations. To filter candidates, apply an exponential moving average to nearby frequencies (frequencies in the same proximity), round the result, and use it to verify the presence of a pilot tone.</p> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Countiue working on Frequency scanning &amp; Channel Listing: Station Detection and listing</li> <li>Advanced/Debug view</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Integrated RDS, and attempt to create a FM radio scanner]]></summary></entry><entry><title type="html">FM Receiver with GNU Radio- Week 3</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week3/" rel="alternate" type="text/html" title="FM Receiver with GNU Radio- Week 3"/><published>2025-06-13T01:00:00+00:00</published><updated>2025-06-13T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week3</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week3/"><![CDATA[<h2 id="fm-receiver-app--week-3-update">FM Receiver App – Week 3 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Integrating GNU Radio flowgraphs to python application</li> <li>Changing the UI according to community suggestions</li> <li>Rearrange Directory Structure</li> </ol> <hr/> <h3 id="creating-simple-fm-receiver">Creating Simple FM Receiver</h3> <p>First, lets start with a simple FM Receiver; following the <a href="https://wiki.gnuradio.org/index.php?title=RTL-SDR_FM_Receiver">tutorial</a>.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week3/flowgraph-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week3/flowgraph-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week3/flowgraph-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week3/flowgraph.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="looking-into-the-code">Looking into the code</h4> <p>Every flowgraph (GRC) file generates a python file, inorder to integrate the flowgraph into the application we first need to take a look at the generated code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# -*- coding: utf-8 -*-
</span>
<span class="c1">#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: Not titled yet
# GNU Radio version: 3.10.1.1
</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">analog</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">audio</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="nb">filter</span>
<span class="kn">from</span> <span class="n">gnuradio.filter</span> <span class="kn">import</span> <span class="n">firdes</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">gr</span>
<span class="kn">from</span> <span class="n">gnuradio.fft</span> <span class="kn">import</span> <span class="n">window</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">argparse</span> <span class="kn">import</span> <span class="n">ArgumentParser</span>
<span class="kn">from</span> <span class="n">gnuradio.eng_arg</span> <span class="kn">import</span> <span class="n">eng_float</span><span class="p">,</span> <span class="n">intx</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">eng_notation</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">soapy</span>




<span class="k">class</span> <span class="nc">simple_fm_receiver</span><span class="p">(</span><span class="n">gr</span><span class="p">.</span><span class="n">top_block</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">gr</span><span class="p">.</span><span class="n">top_block</span><span class="p">.</span><span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">Not titled yet</span><span class="sh">"</span><span class="p">,</span> <span class="n">catch_exceptions</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c1">##################################################
</span>        <span class="c1"># Variables
</span>        <span class="c1">##################################################
</span>        <span class="n">self</span><span class="p">.</span><span class="n">freq</span> <span class="o">=</span> <span class="n">freq</span> <span class="o">=</span> <span class="mi">88700000</span>

        <span class="c1">##################################################
</span>        <span class="c1"># Blocks
</span>        <span class="c1">##################################################
</span>        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">driver=rtlsdr</span><span class="sh">'</span>
        <span class="n">stream_args</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="n">tune_args</span> <span class="o">=</span> <span class="p">[</span><span class="sh">''</span><span class="p">]</span>
        <span class="n">settings</span> <span class="o">=</span> <span class="p">[</span><span class="sh">''</span><span class="p">]</span>

        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span> <span class="o">=</span> <span class="n">soapy</span><span class="p">.</span><span class="nf">source</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="sh">"</span><span class="s">fc32</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span>
                                  <span class="n">stream_args</span><span class="p">,</span> <span class="n">tune_args</span><span class="p">,</span> <span class="n">settings</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_sample_rate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">2.048</span><span class="o">*</span><span class="mi">10</span><span class="o">**</span><span class="mi">6</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_gain_mode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_frequency</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">freq</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_frequency_correction</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_gain</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">TUNER</span><span class="sh">'</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">rational_resampler_xxx_0</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">.</span><span class="nf">rational_resampler_ccc</span><span class="p">(</span>
                <span class="n">interpolation</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                <span class="n">decimation</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span>
                <span class="n">taps</span><span class="o">=</span><span class="p">[],</span>
                <span class="n">fractional_bw</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">audio_sink_0</span> <span class="o">=</span> <span class="n">audio</span><span class="p">.</span><span class="nf">sink</span><span class="p">(</span><span class="mi">48000</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analog_wfm_rcv_0</span> <span class="o">=</span> <span class="n">analog</span><span class="p">.</span><span class="nf">wfm_rcv</span><span class="p">(</span>
        	<span class="n">quad_rate</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="mi">48</span><span class="o">*</span><span class="mi">10</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span>
        	<span class="n">audio_decimation</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="p">)</span>


        <span class="c1">##################################################
</span>        <span class="c1"># Connections
</span>        <span class="c1">##################################################
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">analog_wfm_rcv_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">audio_sink_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">rational_resampler_xxx_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">analog_wfm_rcv_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rational_resampler_xxx_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>


    <span class="k">def</span> <span class="nf">get_freq</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">freq</span>

    <span class="k">def</span> <span class="nf">set_freq</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">freq</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">freq</span> <span class="o">=</span> <span class="n">freq</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_frequency</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">freq</span><span class="p">)</span>




<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">top_block_cls</span><span class="o">=</span><span class="n">simple_fm_receiver</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">tb</span> <span class="o">=</span> <span class="nf">top_block_cls</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">sig_handler</span><span class="p">(</span><span class="n">sig</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">frame</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">tb</span><span class="p">.</span><span class="nf">stop</span><span class="p">()</span>
        <span class="n">tb</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>

        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">signal</span><span class="p">.</span><span class="nf">signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">sig_handler</span><span class="p">)</span>
    <span class="n">signal</span><span class="p">.</span><span class="nf">signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">sig_handler</span><span class="p">)</span>

    <span class="n">tb</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="nf">input</span><span class="p">(</span><span class="sh">'</span><span class="s">Press Enter to quit: </span><span class="sh">'</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">EOFError</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="n">tb</span><span class="p">.</span><span class="nf">stop</span><span class="p">()</span>
    <span class="n">tb</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div> <p>Our main focus here is on the object created in the main function <code class="language-plaintext highlighter-rouge">top_block_cls=simple_fm_receiver</code> and it’s functions, more specifically the <code class="language-plaintext highlighter-rouge">set_freq</code> function. We will be using this to instaniate the object and control the frequency.</p> <h3 id="integration-with-python">Integration with python</h3> <p>Before moving on onto the next part, assuming youre using a python virtual enviroment like mine I am you first need to tell it where to look for the GNU Radio python libraries and file. To do so you need to have GNU Radio installed on your system and run this command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv <span class="nt">--system-site-packages</span>
</code></pre></div></div> <p>For further information, refer to this email: <a href="https://lists.gnu.org/archive/html/discuss-gnuradio/2025-06/msg00010.html">Re: Integrating GRC-Generated Python Code into Python Virtual Environmen </a></p> <hr/> <p>Now time to work, simply put I followed and will always follow these 3 steps:</p> <ul> <li>Import object (simple_fm_receiver) from flowgraph.py file</li> <li>Instantiate object in main window class, <code class="language-plaintext highlighter-rouge">self.simple_fm_receiver = simple_fm_receiver()</code></li> <li>Use simple_fm_receiver methodes, like start/stop/set_freq to control the flograph and its elements/variables.</li> </ul> <h4 id="gui-change">GUI Change</h4> <p>Its easier to show the new UI than to describe the changes:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week3/new_ui-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week3/new_ui-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week3/new_ui-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week3/new_ui.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It was inspired by simplistic design recommended from this series of email from the mailing list: <a href="https://lists.gnu.org/archive/html/discuss-gnuradio/2025-06/msg00008.html">Re: Feedback Wanted: UI of FM receiver GsoC project</a></p> <hr/> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>RDS integration</li> <li>Frequency scanning &amp; Channel Listing</li> <li>Advanced/Debug view</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Simple FM reciver flowgraph integration with back end and UI changes]]></summary></entry><entry><title type="html">FM Receiver with GNU Radio- Week 2</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week2/" rel="alternate" type="text/html" title="FM Receiver with GNU Radio- Week 2"/><published>2025-06-06T01:00:00+00:00</published><updated>2025-06-06T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week2</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week2/"><![CDATA[<h2 id="fm-receiver-app--week-2-update">FM Receiver App – Week 2 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Establishing a comprehensive project directory structure</li> <li>Designing and prototyping the user interface (UI)</li> </ol> <hr/> <h3 id="1-repository-structure-setup">1. Repository Structure Setup</h3> <p>I used python project templates along with AI to helping shape the structure in a clean, scalable format.</p> <p>Here’s the high-level breakdown:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fm-receiver-app/
├── docs/              # Documentation (Installation, Dev Guide, etc.)
├── flowgraphs/        # GNU Radio Companion (.grc) + generated Python
├── src/               # Main application (core logic, GUI, utils)
├── tests/             # Unit and integration tests
├── scripts/           # Dev utilities (build, package, test)
├── examples/          # Sample setups for different SDRs
├── packaging/         # OS-specific distribution configs
├── data/              # Sample recordings and configs
├── README.md, setup.py, requirements.txt, etc.
</code></pre></div></div> <p>Some key highlights:</p> <ul> <li><code class="language-plaintext highlighter-rouge">flowgraphs/</code> contains <code class="language-plaintext highlighter-rouge">.grc</code> and autogenerated Python scripts for different receiver modes (basic FM, RDS, etc.).</li> <li><code class="language-plaintext highlighter-rouge">src/fm_receiver/gui/</code> holds all the GUI components, organized by responsibility (e.g., spectrum, control panel, RDS).</li> <li><code class="language-plaintext highlighter-rouge">core/</code> contains the interface to GNU Radio, signal processing, and audio handling.</li> <li><code class="language-plaintext highlighter-rouge">utils/</code> supports tasks like frequency conversions, logging, and file I/O.</li> <li>Tests are separated into functional and integration layers to keep development reliable and regression-free.</li> </ul> <p>This structure sets the foundation for long-term maintainability and team collaboration.</p> <hr/> <h3 id="2-ui-design-progress">2. UI Design Progress</h3> <p>After drafting the initial layout with pencil sketches, I moved into high-fidelity Figma mockups and started implementing the first working UI in PyQt5.</p> <h4 id="initial-concept-sketch">Initial Concept Sketch</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/sketch-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/sketch-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/sketch-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/sketch.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="figma-mockup-preview">Figma Mockup Preview</h4> <p>This guided the visual hierarchy and layout of the interface.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/home-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/home-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/home-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/home.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/home_fft-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/home_fft-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/home_fft-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/home_fft.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="implemented-in-pyqt5">Implemented in PyQt5</h4> <p>Basic layout with main window, side bar and channel list. Channels are made up data for now.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/basic_ui-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/basic_ui-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/basic_ui-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/basic_ui.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="tools-and-frameworks-used">Tools and Frameworks Used</h3> <ul> <li>GUI Framework: PyQt5</li> <li>Signal Processing: GNU Radio 3.10+</li> <li>Design Tools: Figma for mockups, pencil for fast sketching</li> </ul> <hr/> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Develop the the GNU Radio flow graph for FM reception and RDS decoding</li> <li>Polish the GUI, settings, advance view and flow graph control</li> <li>Attempt to connect the pyhton generated flowgraphs with the frontend</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> <li><a href="https://www.pythonguis.com/pyqt5-tutorial/">Pyqt tutorial</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Designing app UI and creating repository structure]]></summary></entry></feed>