<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://studhamza.github.io/hamza-folio/feed.xml" rel="self" type="application/atom+xml"/><link href="https://studhamza.github.io/hamza-folio/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-27T08:34:53+00:00</updated><id>https://studhamza.github.io/hamza-folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">FM Detection and Debug View</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5/" rel="alternate" type="text/html" title="FM Detection and Debug View"/><published>2025-06-27T01:00:00+00:00</published><updated>2025-06-27T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week5/"><![CDATA[<h2 id="fm-receiver-app--week-5-update">FM Receiver App – Week 5 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Implemented a FM Scanner</li> <li>Implemented features from debug view</li> </ol> <hr/> <h3 id="fm-scanner">FM Scanner</h3> <p>Compared to last week, this week’s approach to detecting FM stations is completely different. I decided to shift from using peak detection to a new method: computing the sum of frequency bins around each candidate frequency raster, then normalizing the data and applying a threshold. This approach was suggested by my mentor and a community member, FunkyLab. It leverages our existing knowledge about FM stations to help detect them more effectively.</p> <p>This approach takes advantage of the fact that FM stations are aligned to a 100 kHz raster—you’ll never find a station at, say, 87.765 MHz.</p> <p>However, since the output size is unknown, I couldn’t implement the entire logic within a single GRC flowgraph. Instead, I split the process: the scanning is handled by a flowgraph, and I wrote a custom Python function to perform the detection.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/fm_scanner-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/fm_scanner.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The flowgraph above computes a \(2^7 = 128\) point FFT over a 2.048 MHz bandwidth centered around a given frequency. This means each FFT bin covers a bandwidth of:</p> \[\text{Bin Bandwidth} = \frac{2.048 \times 10^6}{128} = 16,000 \text{ Hz}\] <p>This information is useful because it allows us to estimate the size of an FM station in terms of bins. Since a typical FM station occupies approximately 200 kHz, the station size in bins is:</p> <p>\(\frac{200 \times 10^3}{16 \times 10^3} = 12.5 \text{ bins}\) That means to compute the power around a candidate station, you take 7 bins to the left and 7 bins to the right (14 bins total), sum their magnitudes, and assign the result as the power of that station candidate.</p> <div class="row"> <div class="col-sm mt-9 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/psd-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/psd-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/psd-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/psd.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/power_sum-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/power_sum-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/power_sum-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/power_sum.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Source Code:</strong> You can check out my detection function here: <a href="https://github.com/StudHamza/GNU-Radio-FM-App/blob/main/src/fm_receiver/utils/fm_scanner.py">src/fm_receiver/utils/fm_scanner.py</a>.</p> <h4 id="problem-with-this-approach">Problem with this approach</h4> <p>Now, there are some limitations to this approach, since we’re normalizing the data:</p> <ol> <li> <p><strong>Noise Amplification</strong><br/> If no channel falls within the bandwidth, this amplifies the noise. Additionally, if one channel significantly peaks above the rest, the threshold might fail to detect lower-power channels.</p> </li> <li> <p><strong>Adjacent Frequencies Detected as Stations</strong><br/> A second limitation is that adjacent candidate frequencies might be individually detected as stations. However, this can be easily overcome by eliminating adjacent frequencies and selecting the candidate with the highest power sum, since we know that stations should be at least 100 kHz apart.</p> </li> <li> <p><strong>Non-GRC Approach</strong><br/> The detection logic is a Python function. This breaks my modular design principle of wanting to run all DSP components within GNU Radio flowgraphs, and keep the code focused on the frontend.</p> </li> <li> <p><strong>Sharing SDR Resources</strong><br/> For now, my approach is to <code class="language-plaintext highlighter-rouge">del</code> the flowgraph variable in Python to detach the SDR kernel before running the FM scanner. I also used <code class="language-plaintext highlighter-rouge">QThread</code> to prevent the application from freezing during the scanning process.</p> </li> </ol> <h4 id="accuracy">Accuracy</h4> <p>This simple FM detector identifies up to 23 stations using my Nooelec Smart v5 and LNA configuration. I haven’t done much experimentation yet, but so far all detected stations are legitimate — I verified them by listening.</p> <p>Another possible verification approach is to detect the 19 kHz pilot tone in the FM-demodulated signal. Which brings us to the next topic, the debug view.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="debug-view">Debug View</h3> <p>The debug view is not complete yet. I’ve added some visualizations, but there should be more control over flowgraph variables such as filter taps, FM bandwidth, gain, volume, squelch, and other parameters.</p> <p>Currently, there are four tabs:</p> <ol> <li><strong>Rf band</strong> — 1024-point FFT of the scanned FM bandwidth</li> <li><strong>Waterfall</strong> — FFT representation of the filtered FM signal before demodulation</li> <li><strong>RDS panel</strong> — Constellation diagram for RDS (Radio Data System)</li> <li><strong>FM demod visualization</strong> — Time-domain or spectral view of the FM-demodulated audio</li> </ol> <p>In the debug view looks like this:</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rf_band-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rf_band-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rf_band.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/water_fall-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/water_fall-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/water_fall.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/rds-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/rds-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/rds-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/rds.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week5/pilot_tone-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week5/pilot_tone.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></swiper-slide> </swiper-container> <h3 id="improvement-ideas">Improvement Ideas</h3> <p>I need to find a way to improve the scanning part in the following areas:</p> <ol> <li> <p><strong>Efficiency</strong><br/> Currently, I detach the SDR kernel by deleting the flowgraph object (<code class="language-plaintext highlighter-rouge">del</code>). A better approach would be to manage SDR access more gracefully, without fully tearing down and rebuilding the flowgraph.</p> </li> <li> <p><strong>Interactivity</strong><br/> The scanner currently just outputs logs. I’d like to make it more interactive — for example, by integrating progress indicators, real-time spectrum updates, or UI feedback to improve the user experience.</p> </li> <li> <p><strong>Debug View Customization</strong><br/> I need to add more control variables to the debug view to allow users to customize parameters such as filter taps, FM bandwidth, gain, squelch, and volume in real time.</p> </li> </ol> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Enhance Advanced/Debug view, add more control</li> <li>Polish frontend</li> <li>Add record stream feature</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[FM Scanner and Debug view]]></summary></entry><entry><title type="html">RDS integration and FM Detection</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week4/" rel="alternate" type="text/html" title="RDS integration and FM Detection"/><published>2025-06-20T01:00:00+00:00</published><updated>2025-06-20T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week4</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week4/"><![CDATA[<h2 id="fm-receiver-app--week-4-update">FM Receiver App – Week 4 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Integrating gr-rds rds panel into my frontend application</li> <li>Improve over all GUI and add stylesheets</li> <li>Attempt to Create FM Scanner</li> </ol> <hr/> <h3 id="rds-integration--ui-change">RDS Integration &amp; UI Change</h3> <p>Following my last blog, integrating the RDS into my app was a piece of cake. First I moved things around, made some improvement to the UI. The new UI looks like this:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/rds_ui-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/rds_ui-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/rds_ui-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/rds_ui.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Then I used the RDS panel of the <a href="https://github.com/bastibl/gr-rds">gr-rds</a> OOT module in my application. First i had to import the new flowgraph block <code class="language-plaintext highlighter-rouge">from flowgraphs.rds_rx import rds_rx</code> then instantiate the new FM Receiver <code class="language-plaintext highlighter-rouge">self.rds_fm_receiver = rds_rx()</code> and save the variable <code class="language-plaintext highlighter-rouge">self.fm_receiver = self.rds_fm_receiver</code>, finally add the <code class="language-plaintext highlighter-rouge">self.rds_info = self.fm_receiver.rds_panel_0</code> to the home widget.</p> <h3 id="frequency-scanning">Frequency Scanning</h3> <p>My initial approach was to scan the spectrum, get the Power Spectral Density to identify candidate stations by their power and verify candidate stations are actually FM station by attempting demodulation and looking for <a href="https://en.wikipedia.org/wiki/Pilot_signal">19kHz pilot tone</a>.</p> <p>So in attempt to build the scanner, I first started working on the PSD part of the flow graph.</p> \[\text{PSD}(f) = 10 \cdot \log_{10} \left( |\text{FFT}(x(t))|^2 \right)\] <p>In the flowgraph it looks like this:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/pds_custom_threshold.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/pds_flow-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/pds_flow-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/pds_flow-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/pds_flow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This is my first attempt with a embedded python block to threshold the values.</p> <p>Other Attempts of thresholding are :</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/threshold2-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/threshold2-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/threshold2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/threshold2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/threshold3-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/threshold3-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/threshold3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/threshold3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>But later, I noticed that the threshold only works because I’m using the my LNA, when i removed it. No stations were detected regardless of the visible peaks, so I had to implement a relative threshold detector. Luckly the <a href="https://wiki.gnuradio.org/index.php/Peak_Detector2">Peak Detector 2</a> block in GNU Radio does that, so I converted the vector back to stream to detect the potential active stations.</p> <p>And finally its time to convert the 1024 fft bins to their coresponding frequencies, for that I used a embedded python block. It computes the frequency location using this equation:</p> \[f_i = f_c + \left(i - \frac{N}{2}\right) \cdot \frac{f_s}{N}, \quad \text{for } i = 0, 1, 2, \ldots, N - 1\] <p>And sends the output using a pmt message. The flowgraph until now looks like this:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/flowgraph-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/flowgraph.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week4/flowgraph2-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph2-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week4/flowgraph2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week4/flowgraph2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="problems">Problems</h4> <p>I’ve faced some difficulties implementing the scanner since some of the blocks only deal with streams (Threshold blocks) and others require vectors. It was also hard to visualize, since GNU Radio sinks lack any features to reverse the X-Y axis during plotting or plot frequency bins. But my biggest problem now is how to remove the variations of the detected stations. The threshold values keep deviating and do not stick to a specific value. One approach is to use an averaging function.</p> <p>The flow graph continuously outputs PMT messages for detected stations. To filter candidates, apply an exponential moving average to nearby frequencies (frequencies in the same proximity), round the result, and use it to verify the presence of a pilot tone.</p> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Countiue working on Frequency scanning &amp; Channel Listing: Station Detection and listing</li> <li>Advanced/Debug view</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Integrated RDS, and attempt to create a FM radio scanner]]></summary></entry><entry><title type="html">FM Receiver with GNU Radio- Week 3</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week3/" rel="alternate" type="text/html" title="FM Receiver with GNU Radio- Week 3"/><published>2025-06-13T01:00:00+00:00</published><updated>2025-06-13T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week3</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week3/"><![CDATA[<h2 id="fm-receiver-app--week-3-update">FM Receiver App – Week 3 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Integrating GNU Radio flowgraphs to python application</li> <li>Changing the UI according to community suggestions</li> <li>Rearrange Directory Structure</li> </ol> <hr/> <h3 id="creating-simple-fm-receiver">Creating Simple FM Receiver</h3> <p>First, lets start with a simple FM Receiver; following the <a href="https://wiki.gnuradio.org/index.php?title=RTL-SDR_FM_Receiver">tutorial</a>.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week3/flowgraph-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week3/flowgraph-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week3/flowgraph-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week3/flowgraph.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="looking-into-the-code">Looking into the code</h4> <p>Every flowgraph (GRC) file generates a python file, inorder to integrate the flowgraph into the application we first need to take a look at the generated code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# -*- coding: utf-8 -*-
</span>
<span class="c1">#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: Not titled yet
# GNU Radio version: 3.10.1.1
</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">analog</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">audio</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="nb">filter</span>
<span class="kn">from</span> <span class="n">gnuradio.filter</span> <span class="kn">import</span> <span class="n">firdes</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">gr</span>
<span class="kn">from</span> <span class="n">gnuradio.fft</span> <span class="kn">import</span> <span class="n">window</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">argparse</span> <span class="kn">import</span> <span class="n">ArgumentParser</span>
<span class="kn">from</span> <span class="n">gnuradio.eng_arg</span> <span class="kn">import</span> <span class="n">eng_float</span><span class="p">,</span> <span class="n">intx</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">eng_notation</span>
<span class="kn">from</span> <span class="n">gnuradio</span> <span class="kn">import</span> <span class="n">soapy</span>




<span class="k">class</span> <span class="nc">simple_fm_receiver</span><span class="p">(</span><span class="n">gr</span><span class="p">.</span><span class="n">top_block</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">gr</span><span class="p">.</span><span class="n">top_block</span><span class="p">.</span><span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">Not titled yet</span><span class="sh">"</span><span class="p">,</span> <span class="n">catch_exceptions</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c1">##################################################
</span>        <span class="c1"># Variables
</span>        <span class="c1">##################################################
</span>        <span class="n">self</span><span class="p">.</span><span class="n">freq</span> <span class="o">=</span> <span class="n">freq</span> <span class="o">=</span> <span class="mi">88700000</span>

        <span class="c1">##################################################
</span>        <span class="c1"># Blocks
</span>        <span class="c1">##################################################
</span>        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">dev</span> <span class="o">=</span> <span class="sh">'</span><span class="s">driver=rtlsdr</span><span class="sh">'</span>
        <span class="n">stream_args</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="n">tune_args</span> <span class="o">=</span> <span class="p">[</span><span class="sh">''</span><span class="p">]</span>
        <span class="n">settings</span> <span class="o">=</span> <span class="p">[</span><span class="sh">''</span><span class="p">]</span>

        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span> <span class="o">=</span> <span class="n">soapy</span><span class="p">.</span><span class="nf">source</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="sh">"</span><span class="s">fc32</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span>
                                  <span class="n">stream_args</span><span class="p">,</span> <span class="n">tune_args</span><span class="p">,</span> <span class="n">settings</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_sample_rate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">2.048</span><span class="o">*</span><span class="mi">10</span><span class="o">**</span><span class="mi">6</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_gain_mode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_frequency</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">freq</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_frequency_correction</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_gain</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">TUNER</span><span class="sh">'</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">rational_resampler_xxx_0</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">.</span><span class="nf">rational_resampler_ccc</span><span class="p">(</span>
                <span class="n">interpolation</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                <span class="n">decimation</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span>
                <span class="n">taps</span><span class="o">=</span><span class="p">[],</span>
                <span class="n">fractional_bw</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">audio_sink_0</span> <span class="o">=</span> <span class="n">audio</span><span class="p">.</span><span class="nf">sink</span><span class="p">(</span><span class="mi">48000</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">analog_wfm_rcv_0</span> <span class="o">=</span> <span class="n">analog</span><span class="p">.</span><span class="nf">wfm_rcv</span><span class="p">(</span>
        	<span class="n">quad_rate</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="mi">48</span><span class="o">*</span><span class="mi">10</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span>
        	<span class="n">audio_decimation</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="p">)</span>


        <span class="c1">##################################################
</span>        <span class="c1"># Connections
</span>        <span class="c1">##################################################
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">analog_wfm_rcv_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">audio_sink_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">rational_resampler_xxx_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">analog_wfm_rcv_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rational_resampler_xxx_0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>


    <span class="k">def</span> <span class="nf">get_freq</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">freq</span>

    <span class="k">def</span> <span class="nf">set_freq</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">freq</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">freq</span> <span class="o">=</span> <span class="n">freq</span>
        <span class="n">self</span><span class="p">.</span><span class="n">soapy_rtlsdr_source_0</span><span class="p">.</span><span class="nf">set_frequency</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">freq</span><span class="p">)</span>




<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">top_block_cls</span><span class="o">=</span><span class="n">simple_fm_receiver</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">tb</span> <span class="o">=</span> <span class="nf">top_block_cls</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">sig_handler</span><span class="p">(</span><span class="n">sig</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">frame</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">tb</span><span class="p">.</span><span class="nf">stop</span><span class="p">()</span>
        <span class="n">tb</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>

        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">signal</span><span class="p">.</span><span class="nf">signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">sig_handler</span><span class="p">)</span>
    <span class="n">signal</span><span class="p">.</span><span class="nf">signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">sig_handler</span><span class="p">)</span>

    <span class="n">tb</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="nf">input</span><span class="p">(</span><span class="sh">'</span><span class="s">Press Enter to quit: </span><span class="sh">'</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">EOFError</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="n">tb</span><span class="p">.</span><span class="nf">stop</span><span class="p">()</span>
    <span class="n">tb</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div> <p>Our main focus here is on the object created in the main function <code class="language-plaintext highlighter-rouge">top_block_cls=simple_fm_receiver</code> and it’s functions, more specifically the <code class="language-plaintext highlighter-rouge">set_freq</code> function. We will be using this to instaniate the object and control the frequency.</p> <h3 id="integration-with-python">Integration with python</h3> <p>Before moving on onto the next part, assuming youre using a python virtual enviroment like mine I am you first need to tell it where to look for the GNU Radio python libraries and file. To do so you need to have GNU Radio installed on your system and run this command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv <span class="nt">--system-site-packages</span>
</code></pre></div></div> <p>For further information, refer to this email: <a href="https://lists.gnu.org/archive/html/discuss-gnuradio/2025-06/msg00010.html">Re: Integrating GRC-Generated Python Code into Python Virtual Environmen </a></p> <hr/> <p>Now time to work, simply put I followed and will always follow these 3 steps:</p> <ul> <li>Import object (simple_fm_receiver) from flowgraph.py file</li> <li>Instantiate object in main window class, <code class="language-plaintext highlighter-rouge">self.simple_fm_receiver = simple_fm_receiver()</code></li> <li>Use simple_fm_receiver methodes, like start/stop/set_freq to control the flograph and its elements/variables.</li> </ul> <h4 id="gui-change">GUI Change</h4> <p>Its easier to show the new UI than to describe the changes:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week3/new_ui-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week3/new_ui-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week3/new_ui-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week3/new_ui.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It was inspired by simplistic design recommended from this series of email from the mailing list: <a href="https://lists.gnu.org/archive/html/discuss-gnuradio/2025-06/msg00008.html">Re: Feedback Wanted: UI of FM receiver GsoC project</a></p> <hr/> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>RDS integration</li> <li>Frequency scanning &amp; Channel Listing</li> <li>Advanced/Debug view</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Simple FM reciver flowgraph integration with back end and UI changes]]></summary></entry><entry><title type="html">FM Receiver with GNU Radio- Week 2</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week2/" rel="alternate" type="text/html" title="FM Receiver with GNU Radio- Week 2"/><published>2025-06-06T01:00:00+00:00</published><updated>2025-06-06T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu-week2</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu-week2/"><![CDATA[<h2 id="fm-receiver-app--week-2-update">FM Receiver App – Week 2 Update</h2> <p>This week, I made progress in the following features:</p> <ol> <li>Establishing a comprehensive project directory structure</li> <li>Designing and prototyping the user interface (UI)</li> </ol> <hr/> <h3 id="1-repository-structure-setup">1. Repository Structure Setup</h3> <p>I used python project templates along with AI to helping shape the structure in a clean, scalable format.</p> <p>Here’s the high-level breakdown:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fm-receiver-app/
├── docs/              # Documentation (Installation, Dev Guide, etc.)
├── flowgraphs/        # GNU Radio Companion (.grc) + generated Python
├── src/               # Main application (core logic, GUI, utils)
├── tests/             # Unit and integration tests
├── scripts/           # Dev utilities (build, package, test)
├── examples/          # Sample setups for different SDRs
├── packaging/         # OS-specific distribution configs
├── data/              # Sample recordings and configs
├── README.md, setup.py, requirements.txt, etc.
</code></pre></div></div> <p>Some key highlights:</p> <ul> <li><code class="language-plaintext highlighter-rouge">flowgraphs/</code> contains <code class="language-plaintext highlighter-rouge">.grc</code> and autogenerated Python scripts for different receiver modes (basic FM, RDS, etc.).</li> <li><code class="language-plaintext highlighter-rouge">src/fm_receiver/gui/</code> holds all the GUI components, organized by responsibility (e.g., spectrum, control panel, RDS).</li> <li><code class="language-plaintext highlighter-rouge">core/</code> contains the interface to GNU Radio, signal processing, and audio handling.</li> <li><code class="language-plaintext highlighter-rouge">utils/</code> supports tasks like frequency conversions, logging, and file I/O.</li> <li>Tests are separated into functional and integration layers to keep development reliable and regression-free.</li> </ul> <p>This structure sets the foundation for long-term maintainability and team collaboration.</p> <hr/> <h3 id="2-ui-design-progress">2. UI Design Progress</h3> <p>After drafting the initial layout with pencil sketches, I moved into high-fidelity Figma mockups and started implementing the first working UI in PyQt5.</p> <h4 id="initial-concept-sketch">Initial Concept Sketch</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/sketch-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/sketch-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/sketch-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/sketch.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="figma-mockup-preview">Figma Mockup Preview</h4> <p>This guided the visual hierarchy and layout of the interface.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/home-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/home-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/home-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/home.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/home_fft-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/home_fft-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/home_fft-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/home_fft.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="implemented-in-pyqt5">Implemented in PyQt5</h4> <p>Basic layout with main window, side bar and channel list. Channels are made up data for now.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/gnu_radio/week2/basic_ui-480.webp 480w,/hamza-folio/assets/img/gnu_radio/week2/basic_ui-800.webp 800w,/hamza-folio/assets/img/gnu_radio/week2/basic_ui-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/gnu_radio/week2/basic_ui.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="tools-and-frameworks-used">Tools and Frameworks Used</h3> <ul> <li>GUI Framework: PyQt5</li> <li>Signal Processing: GNU Radio 3.10+</li> <li>Design Tools: Figma for mockups, pencil for fast sketching</li> </ul> <hr/> <h3 id="whats-next">What’s Next?</h3> <p>For next week, I’m planning to:</p> <ul> <li>Develop the the GNU Radio flow graph for FM reception and RDS decoding</li> <li>Polish the GUI, settings, advance view and flow graph control</li> <li>Attempt to connect the pyhton generated flowgraphs with the frontend</li> </ul> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza/GNU-Radio-FM-App">Project Repo</a></li> <li><a href="https://studhamza.github.io/hamza-folio/blog/tag/gnuradio/">Weekly Blogs</a></li> <li><a href="https://www.pythonguis.com/pyqt5-tutorial/">Pyqt tutorial</a></li> </ul>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Designing app UI and creating repository structure]]></summary></entry><entry><title type="html">FM Receiver with GNU Radio- Week 1</title><link href="https://studhamza.github.io/hamza-folio/blog/2025/gnu/" rel="alternate" type="text/html" title="FM Receiver with GNU Radio- Week 1"/><published>2025-05-30T01:00:00+00:00</published><updated>2025-05-30T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2025/gnu</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2025/gnu/"><![CDATA[<p>This summer, I am contributing to GNU Radio as part of <strong>2025 GSOC</strong>. I will be working with the <strong>GNU Radio</strong> community on a project that combines signal processing, software-defined radio, and user-focused design: <strong>Developing a user-friendly FM Broadcast Receiver Application with RDS and Spectrum Scanning</strong>.</p> <hr/> <h2 id="about-the-project">About the Project</h2> <p>The goal is to build a <strong>plug-and-play FM receiver application</strong> that works across various SDR (Software Defined Radio) hardware. This includes:</p> <ul> <li>Receiving and decoding FM radio using GNU Radio flowgraphs</li> <li>Integrating <strong>RDS (Radio Data System)</strong> to extract metadata like station info and song titles</li> <li>Implementing <strong>spectrum scanning</strong> to list active FM channels</li> <li>Providing a <strong>debug view</strong> with real-time plots and visualizations</li> <li>Supporting <strong>recording</strong> and <strong>multi-stream</strong> listening</li> <li>Adding advanced features like <strong>SCA (Subsidiary Communications Authorization)</strong> decoding</li> </ul> <p>The application will be built using <strong>PyQt for the GUI</strong>, and <strong>GNU Radio</strong> for backend signal processing.</p> <hr/> <h2 id="the-bonding-period-plan">The Bonding Period Plan</h2> <p>Between <strong>May 8 and June 1</strong>, I was juggling university finals but still managed to chat with my mentors Andrej and Sebastian about the project details.</p> <p>This time was great for detailing the plan and trying out the gr-rds.</p> <p>A small problem I faced was that RDS is not popular in Egypt; a lot of stations do not have it. But that is no big issue since I can work with already available recordings or connect to a Web SDR.</p> <hr/> <h2 id="whats-next">What’s Next?</h2> <p>Starting <strong>June 2</strong>, the coding period will start and last until April. Next weeks focus is on designing the GUI using the Python library <a href="https://github.com/spyder-ide/qtpy">qtpy</a>.</p> <p>I’ll be sharing updates along the way — on my <a href="https://studhamza.github.io/hamza-folio/blog/2025/gnu">blog</a></p> <hr/> <p><strong>Links</strong></p> <ul> <li><a href="https://github.com/StudHamza">My GitHub</a></li> <li><a href="https://studhamza.github.io/hamza-folio/">My Portfolio</a></li> <li><a href="https://github.com/bastibl/gr-rds">gr-rds</a></li> </ul> <p>Thank you to my mentors and the GNU Radio community.</p> <hr/>]]></content><author><name></name></author><category term="gsoc-updates"/><category term="gnuradio"/><summary type="html"><![CDATA[Announcing my acceptance to Google Summer of Code 2025 and the exciting FM receiver project I'll be working on.]]></summary></entry><entry><title type="html">IBM Watsonx.ai Hackathon</title><link href="https://studhamza.github.io/hamza-folio/blog/2024/ibm/" rel="alternate" type="text/html" title="IBM Watsonx.ai Hackathon"/><published>2024-09-25T01:00:00+00:00</published><updated>2024-09-25T01:00:00+00:00</updated><id>https://studhamza.github.io/hamza-folio/blog/2024/ibm</id><content type="html" xml:base="https://studhamza.github.io/hamza-folio/blog/2024/ibm/"><![CDATA[<p>IBM watsonx.ai next generation enterprise studio for AI builders to train, validate, tune and deploy AI models. In this hackathon, I used the granite foundation model zero shot prompting to create a chatbot that is able to analyize unstructured business documents, (pdfs). I used React for frotend and flask for backend, the flask app is connected to the IBM API to process query and responses. The files are preprocessed before sending it to the granite FM.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/hamza-folio/assets/img/IBM_cert-480.webp 480w,/hamza-folio/assets/img/IBM_cert-800.webp 800w,/hamza-folio/assets/img/IBM_cert-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/hamza-folio/assets/img/IBM_cert.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="competion-posts"/><category term="code"/><summary type="html"><![CDATA[My first hackathon experince]]></summary></entry></feed>